{"version":3,"sources":["components/form_elements/BackButton.tsx","components/general_elements/ToggleStyle.tsx","components/general_elements/Dialog.tsx","components/entities/random_tables/details/RandomTableEditView.tsx","components/entities/random_tables/details/RandomTableView.tsx","components/form_elements/NumberField.tsx","components/form_elements/TextField.tsx","components/form_elements/CheckField.tsx","components/form_elements/SelectField.tsx","services/EnumService.tsx","components/entities/talents/details/TalentEditView.tsx","components/entities/talents/details/TalentView.tsx","components/entities/races/details/RaceView.tsx","components/form_elements/AutoStringField.tsx","components/entities/races/details/RaceEditView.tsx","components/entities/spells/details/SpellView.tsx","components/entities/spells/details/SpellEditView.tsx","components/entities/powers/details/PowerEditView.tsx","components/entities/powers/details/PowerView.tsx","components/entities/skills/details/SkillView.tsx","components/entities/skills/details/SkillEditView.tsx","components/entities/items/details/ItemView.tsx","components/entities/items/details/ItemEditView.tsx","components/entities/tradtitons/details/TradtitionEditView.tsx","components/entities/tradtitons/details/TradtitionView.tsx","components/entities/characters/details/CharacterEditView.tsx","components/general_elements/details/EntityDetail.tsx","components/general_elements/ErrorTile.tsx","components/general_elements/details/ToEntity.tsx","components/general_elements/FormatedText.tsx","data/Skill.tsx","data/RandomTable.tsx"],"names":["BackButton","icon","transform","action","Back","onClick","Icon","styled","FontAwesomeIcon","theme","main","highlight","buttons","color","div","height","ToggleLeft","hoverColor","ToggleRight","EditToggle","props","mode","backgroundColor","tile","Dialog","message","confirmeText","confirmeClick","abortText","abortClick","DialogWrapper","Message","ButtonBar","TextButton","text","RandomTableEditView","randomTable","onEdit","onRowChange","field","value","index","rows","CenterWrapper","StringField","name","label","onChange","header","placeholder","map","row","RowWrapper","key","RowCount","cells","IconButton","faTrash","splice","removeRow","faPlus","RandomTableView","useState","rand","setRand","Name","View","faDice","max","lastRowValues","length","includes","trim","split","Math","round","random","rollForRandom","Prop","faArrowRight","range","min","FormatedText","TableHeadProp","cell","TableProp","th","input","td","NumberField","step","Field","LabelText","Input","type","e","target","TextField","textarea","undefined","CheckField","defaultChecked","checked","Checkmark","SelectField","options","onClear","opts","setOptions","handleChange","option","useEffect","newOptions","forEach","push","StyledSelect","isMulti","isClearable","defaultValue","classNamePrefix","onC","Select","makeEnumSelectable","isNaN","Number","TalentEditView","talent","FieldGroup","isFlaw","cost","TalentType","passiv","category","TalentCategory","magical","mental","physical","social","prerequisite","faBookOpen","effect","triggerFrequency","TalentView","webhook","useWebhook","json","setJson","send","setSend","newJson","username","embeds","author","fields","inline","formatDiscordText","JSON","stringify","Cost","PropWrapper","PropTitle","Text","style","faDiscord","sendEmbedMessage","faPaperPlane","P2PSender","data","span","backgroundColorLink","RaceView","race","talents","setTalents","history","useHistory","reciveAll","results","hp","abilityModifier","stamina","size","sprint","limit","description","link","filter","tal","id","TalentLink","flaws","flaw","AutoStringField","optionTable","filters","optionsTable","filteredOptions","setFilteredOptions","findAllItems","useCallback","a","itemList","table","reciveAllFilteredPromise","Promise","all","items","o","concat","reciveAllFiltered","Array","onSearch","searchTerm","Options","opt","Option","RaceEditView","RaceLimits","empty","Container","fieldName","sort","newTalent","i","onChangeTalent","oldTalent","newTalentList","removeTalent","addNewTalent","newFlaw","onChangeFlaw","oldFlaw","newFlawList","removeFlaw","addNewFlaw","SpellView","spell","source","castTime","School","school","Flag","drain","needsMaterial","glyph","rite","mastery","resist","SpellEditView","canBeSaved","SpellSchool","NONE","SpellSource","level","SpellLevel","SpellRite","duration","SpellDuration","drainType","SpellDrainType","SpellCastTime","spellTarget","SpellTarget","SpellRange","targetingType","SpellTargetingType","getAll","Spell","calcDrain","find","chargeable","Separator","NECROMANCY","STUN","PHYSICAL","getAllPhysical","getAllStun","LOSAURA","projectileType","AOE","SpellProjectileType","getAllSingle","SPRAY","projectileNumber","SpellProjectileNumber","SONIC","TOUCH","RADIUS90","RADIUS360","losRange","SpellLosRange","LOSMANIPULATE","aoeRadius","SpellAoeRadius","damage","SpellDamage","newDa","damageType","SpellDamageType","scalingEffect","SpellScalingEffect","directEffects","SpellDirectEffects","WALLBARRIERCONSTRUCTSUMMON","SpellSize","SpellHp","FIXEDTICKS","FIXEDROUNDS","FIXEDHOURS","durationText","COMBINED","PURE","pureDamage","SpellPureDamage","PowerEditView","power","ticks","isAdept","path","stress","PowerView","SkillView","skill","die","bonus","mod","advantage","disadvantage","details","SkillEditView","SkillDie","dfour","dsix","deight","dten","dtwelve","ItemView","item","quality","ItemEditView","TraditionEditView","tradition","isPath","powers","newPower","onChangePower","oldPower","newPowerList","removePower","addNewPower","TraditionView","setPowers","pow","PowerLink","CharacterEditView","character","EntityDetail","entity","tableName","isNew","view","editMode","setMode","entityObj","editEntity","showDeleteDialog","setDeleteDialog","showAlert","setAlert","setMessage","unsavedChanges","setUnsavedChanges","setCanBeSaved","updateEntity","msg","updateWithCallback","result","setTimeout","editAndSaveEntity","views","CharacterView","faExclamationTriangle","remove","goBack","TopBar","faArrowLeft","toString","faSave","disabled","obj","newObj","createNewWithId","duplicateEntity","faClone","entityId","React","createElement","toLocaleLowerCase","val","ErrorTile","buttonText","onButton","Tile","faPlusCircle","boxShadow","headerColor","ToEntity","match","entityName","setEntityName","setEntity","loading","setLoading","error","setError","makeEntity","newEntity","params","recivePromiseByAttribute","recivePromise","newMatch","replaceAll","str","entities","Talent","Race","randomTables","RandomTable","Loading","createNewEntity","charAt","toUpperCase","slice","formatedText","setFormatedText","newText","substring","content","cut","cutStart","cutEnd","substr","rollDiscord","command","rollCommand","rolls","sendMessage","newCommand","parseInt","krit","fail","rollString","formatLink","parts","formattedParts","part","codePart","linkParts","linkEntity","TextPart","DiscordPart","entityParts","Link","formatTable","textPart","newTable","tableEnd","tableRows","isHead","formatText","indexOf","FormatedTextContainer","float","padding","Skill","this","makeCsv","filename"],"mappings":"knBAaA,IAQeA,EARI,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,OACrC,OACE,kBAACC,EAAD,CAAMC,QAASF,GACb,kBAACG,EAAD,CAAML,KAAMA,EAAMC,UAAWA,MAO7BI,EAAOC,YAAOC,IAAPD,CAAH,KAMC,qBAAGE,MAAkBC,KAAKC,aAExB,qBAAGF,MAAkBG,QAAQC,SAIpCT,EAAOG,IAAOO,IAAV,KAEU,qBAAGL,MAAkBG,QAAQG,U,ovBCnC1C,IAAMC,EAAaT,IAAOO,IAAV,KAIX,qBAAGL,MAAkBG,QAAQG,UACxB,qBAAGN,MAAkBG,QAAQG,UASjC,qBAAGN,MAAkBG,QAAQK,cAI7BC,EAAcX,YAAOS,EAAPT,CAAH,KAUXY,EAAaZ,IAAOO,IAAV,KAEX,qBAAGL,MAAkBG,QAAQG,UAE9B,qBAAGN,MAAkBG,QAAQC,QAEpCG,GACoB,SAACI,GACnB,MAAmB,SAAfA,EAAMC,KACD,qBAAGZ,MAAkBG,QAAQU,iBAE7B,qBAAGb,MAAkBc,KAAKD,mBAKrCJ,GACoB,SAACE,GACnB,MAAmB,SAAfA,EAAMC,KACD,qBAAGZ,MAAkBG,QAAQU,iBAE7B,qBAAGb,MAAkBc,KAAKD,oB,miBCnCzC,IAqBeE,EArBA,SAAC,GAOD,IANbC,EAMY,EANZA,QACAxB,EAKY,EALZA,KACAyB,EAIY,EAJZA,aACAC,EAGY,EAHZA,cACAC,EAEY,EAFZA,UACAC,EACY,EADZA,WAEA,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACG9B,EAAO,kBAAC,EAAD,CAAMA,KAAMA,IAAW,GADjC,IACsCwB,GAEtC,kBAACO,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAMN,EAAWvB,QAASwB,IACtC,kBAACI,EAAA,EAAD,CAAYC,KAAMR,EAAcrB,QAASsB,OAQ3CG,EAAgBvB,IAAOO,IAAV,KAOG,qBAAGL,MAAkBc,KAAKD,mBACrC,qBAAGb,MAAkBc,KAAKV,SAG/BkB,EAAUxB,IAAOO,IAAV,KAKPkB,EAAYzB,IAAOO,IAAV,KAITR,EAAOC,YAAOC,IAAPD,CAAH,K,kjCC9CV,IAoEe4B,EApEa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,OACpCC,EAAc,SAACC,EAAeC,EAAeC,GACjD,IAAIC,EAAON,EAAYM,KACvBA,EAAKD,GAAL,2BAAmBC,EAAKD,IAAxB,kBAAiCF,EAAQC,IACzCH,EAAO,2BAAKD,GAAN,IAAmBM,KAAMA,MAkBjC,OACE,kBAACC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CACEJ,MAAOJ,EAAYS,KACnBC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKD,GAAN,IAAmBS,KAAMA,QAErD,kBAACD,EAAA,EAAD,CACEJ,MAAOJ,EAAYY,OACnBF,MAAM,SACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKD,GAAN,IAAmBY,OAAQH,MACrDI,YAAa,4BAGjB,kBAAC,EAAD,KACGb,EAAYM,KAAKQ,KAChB,SAACC,EAAuCV,GACtC,OACE,kBAACW,EAAD,CAAYC,IAAKZ,GACf,kBAACa,EAAD,KAAWb,GACX,kBAACG,EAAA,EAAD,CACEJ,MAAOW,EAAIX,MACXM,MAAO,cAAgBL,EACvBM,SAAU,SAACb,GAAD,OAAUI,EAAY,QAASJ,EAAMO,IAC/CQ,YAAW,UAAKR,EAAQ,EAAb,aAEb,kBAACG,EAAA,EAAD,CACEJ,MAAOW,EAAII,MACXT,MAAO,OAASL,EAChBM,SAAU,SAACb,GAAD,OAAUI,EAAY,QAASJ,EAAMO,IAC/CQ,YAAW,eAAUR,EAAV,yBAAgCA,EAAhC,UAEb,kBAACe,EAAA,EAAD,CAAYvD,KAAMwD,IAASpD,QAAS,kBAzChC,SAACoC,GACjB,IAAIC,EAAON,EAAYM,MACR,IAAXD,IACFC,EAAKgB,OAAOjB,EAAO,GACnBJ,EAAO,2BAAKD,GAAN,IAAmBM,KAAMA,MAqCqBiB,CAAUlB,UAK5D,kBAACW,EAAD,KACE,kBAACI,EAAA,EAAD,CAAYvD,KAAM2D,IAAQvD,QAAS,WArDzCgC,EAAO,2BACFD,GADC,IAEJM,KAAK,GAAD,mBAAMN,EAAYM,MAAlB,CAAwB,CAAEF,MAAO,GAAIe,MAAO,gBA4DhDZ,EAAgBpC,IAAOO,IAAV,KASb+C,EAAkBtD,IAAOO,IAAV,KACV,qBAAGL,MAAkBc,KAAKV,SAc/BuC,EAAa7C,IAAOO,IAAV,KAYVwC,EAAW/C,IAAOO,IAAV,KACH,qBAAGL,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mB,6hDC5GhD,IA+FeuC,GA/FS,SAAC,GAA6B,IAA3BzB,EAA0B,EAA1BA,YAA0B,EAC3B0B,oBAAkB,GADS,mBAC5CC,EAD4C,KACtCC,EADsC,KAoBnD,OACE,kBAAC,GAAD,KACE,kBAACC,GAAD,KACE,2BAAI7B,EAAYS,OAElB,kBAACqB,GAAD,KACE,kBAACjC,EAAA,EAAD,CACEC,KAAM,OACNjC,KAAMkE,IACN9D,QAAS,kBA1BK,WACpB,IACI+D,EAAM,GACJC,EAAgBjC,EAAYM,KAAKN,EAAYM,KAAK4B,OAAS,GAAG9B,MACpE,GAAI6B,EAAcE,SAAS,KAEzBH,GADYC,EAAcG,OAAOC,MAAM,KAC1B,QACR,GAAIJ,EAAcE,SAAS,UAAM,CAEtCH,GADYC,EAAcG,OAAOC,MAAM,UAC1B,QAEbL,GAAOC,EAET,IAAMN,EAAOW,KAAKC,MAZN,EAYkBD,KAAKE,UAAYR,EAZnC,IAaZJ,EAAQD,GAYac,MAEhBd,GAAQ,GACP,kBAACe,GAAD,KACGf,EADH,IACS,kBAAC,GAAD,CAAM9D,KAAM8E,MAClB3C,EAAYM,KAAKQ,KAAI,SAACC,GACrB,GAAIA,EAAIX,MAAM+B,SAAS,KAAM,CAC3B,IAAIS,EAAQ7B,EAAIX,MAAMgC,OAAOC,MAAM,KAC7BQ,GAAeD,EAAM,GACrBZ,GAAeY,EAAM,GAC3B,GAAIC,GAAOlB,GAAQA,GAAQK,EACzB,OAAO,kBAACc,EAAA,EAAD,CAAchD,KAAMiB,EAAII,aAC5B,GAAIJ,EAAIX,MAAM+B,SAAS,UAAM,CAClC,IAAIS,EAAQ7B,EAAIX,MAAMgC,OAAOC,MAAM,UAC7BQ,GAAeD,EAAM,GACrBZ,GAAeY,EAAM,GAC3B,GAAIC,GAAOlB,GAAQA,GAAQK,EACzB,OAAO,kBAACc,EAAA,EAAD,CAAchD,KAAMiB,EAAII,YAC5B,CAEL,IADqBJ,EAAIX,QACLuB,EAClB,OAAO,kBAACmB,EAAA,EAAD,CAAchD,KAAMiB,EAAII,QAEnC,OAAO,0CAKf,kBAACW,GAAD,KACE,+BACE,+BACE,4BACE,kBAACiB,GAAD,eACC/C,EAAYY,QACXZ,EAAYY,OACTyB,MAAM,KACNvB,KAAI,SAACkC,EAAc3C,GAClB,OAAO,kBAAC0C,GAAD,CAAe9B,IAAKZ,GAAQ2C,OAG1ChD,EAAYM,MACXN,EAAYM,KAAKQ,KACf,SAACC,EAAuCV,GACtC,OACE,wBAAIY,IAAKZ,GACP,kBAAC4C,GAAD,CAAWhC,IAAKZ,GAAQU,EAAIX,OAC3BW,EAAII,MACFkB,MAAM,KACNvB,KAAI,SAACkC,EAAc3C,GAClB,OACE,kBAAC4C,GAAD,CAAWhC,IAAKZ,GACd,kBAACyC,EAAA,EAAD,CAAchD,KAAMkD,iBAiB5CzC,GAAgBpC,IAAOO,IAAV,MASboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAe/BoD,GAAO1D,IAAOO,IAAV,MAMC,qBAAGL,MAAkBc,KAAKV,SAGf,qBAAGJ,MAAkBc,KAAKD,mBAG1C6D,GAAgB5E,IAAO+E,GAAV,MACG,qBAAG7E,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,SAKhCwE,GAAY9E,IAAOiF,GAAV,KACO,qBAAG/E,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,SAMhCiE,GAAOvE,IAAOO,IAAV,KACY,qBAAGL,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,SAO1B,qBAAGJ,MAAkBG,QAAQG,UACxB,qBAAGN,MAAkBG,QAAQG,UAGxCT,GAAOC,YAAOC,IAAPD,CAAH,KAKC,qBAAGE,MAAkBC,KAAKC,a,wkCCnKrC,IA2Be8E,GA3BK,SAAC,GAAoE,IAAlEjD,EAAiE,EAAjEA,MAAO4B,EAA0D,EAA1DA,IAAKsB,EAAqD,EAArDA,KAAM5C,EAA+C,EAA/CA,MAAO7C,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAW6C,EAAuB,EAAvBA,SAC/D,OACE,kBAAC4C,GAAD,KACE,kBAACC,GAAD,KACG3F,EAAO,kBAAC,GAAD,CAAMA,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4D4C,GAE3DsB,GACC,kBAACyB,GAAD,CACEC,KAAK,SACL1B,IAAKA,EACLsB,KAAMA,GAAc,EACpBlD,MAAOA,EACPO,SAAU,SAACgD,GAAD,OAAOhD,GAAUgD,EAAEC,OAAOxD,WAGtC4B,GACA,kBAACyB,GAAD,CACEC,KAAK,SACLJ,KAAMA,GAAc,EACpBlD,MAAOA,EACPO,SAAU,SAACgD,GAAD,OAAOhD,GAAUgD,EAAEC,OAAOxD,YASxCmD,GAAQpF,IAAOuC,MAAV,MACA,qBAAGrC,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mBAwB1ChB,GAAOC,YAAOC,IAAPD,CAAH,MAMC,qBAAGE,MAAkBC,KAAKC,aAG/BiF,GAAYrF,IAAOO,IAAV,MAIT+E,GAAQtF,IAAOgF,MAAV,MAOW,qBAAG9E,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,S,8mCC7EtC,IAWeoF,GAXG,SAAC,GAAiE,IAA/DzD,EAA8D,EAA9DA,MAAOM,EAAuD,EAAvDA,MAAO/B,EAAgD,EAAhDA,OAAQd,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAW6C,EAAuB,EAAvBA,SAC1D,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACG9C,EAAO,kBAAC,GAAD,CAAMA,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4D4C,GAE5D,kBAAC,GAAD,CAAO/B,OAAQA,EAAQyB,MAAOA,EAAOO,SAAU,SAACgD,GAAD,OAAOhD,EAASgD,EAAEC,OAAOxD,YAOxEmD,GAAQpF,IAAOuC,MAAV,MACA,qBAAGrC,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mBAwB1ChB,GAAOC,YAAOC,IAAPD,CAAH,MAMC,qBAAGE,MAAkBC,KAAKC,aAG/BiF,GAAYrF,IAAOO,IAAV,MAWT+E,GAAQtF,IAAO2F,SAAV,MAKC,gBAAGnF,EAAH,EAAGA,OAAH,YAA4BoF,IAAXpF,EAAuBA,EAAS,UAC7C,gBAAGA,EAAH,EAAGA,OAAH,YAA4BoF,IAAXpF,EAAuBA,EAAS,UAC3C,qBAAGN,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,S,yvDCpEtC,IAgBeuF,GAhBI,SAAC,GAAyD,IAAvD5D,EAAsD,EAAtDA,MAAOM,EAA+C,EAA/CA,MAAO7C,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAW6C,EAAuB,EAAvBA,SACnD,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACG9C,EAAO,kBAAC,GAAD,CAAMA,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4D4C,GAE5D,kBAAC,GAAD,CACEgD,KAAK,WACLO,eAAgB7D,EAChBO,SAAU,SAACgD,GAAD,OAAOhD,EAASgD,EAAEC,OAAOM,YAErC,kBAACC,GAAD,QAOAZ,GAAQpF,IAAOuC,MAAV,MACA,qBAAGrC,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mBA0B1ChB,GAAOC,YAAOC,IAAPD,CAAH,MAMC,qBAAGE,MAAkBC,KAAKC,aAG/BiF,GAAYrF,IAAOO,IAAV,MAITyF,GAAYhG,IAAOO,IAAV,MAQO,qBAAGL,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,SAsBhCgF,GAAQtF,IAAOgF,MAAV,KASKgB,IACQ,qBAAG9F,MAAkBC,KAAKC,aACrC,qBAAGF,MAAkBG,QAAQC,QAG1B0F,I,kqCCnGhB,IAoCeC,GApCK,SAAC,GAA2E,IAAzEhE,EAAwE,EAAxEA,MAAOiE,EAAiE,EAAjEA,QAAS3D,EAAwD,EAAxDA,MAAO7C,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,UAAW6C,EAAgC,EAAhCA,SAAU2D,EAAsB,EAAtBA,QAAsB,EAClE5C,mBAA6C,IADqB,mBACtF6C,EADsF,KAChFC,EADgF,KAEvFC,EAAe,SAACC,GACL,OAAXA,QAA8BX,IAAXW,EACrB/D,EAAS+D,EAAOtE,OAEhBkE,KAUJ,OANAK,qBAAU,WACR,IAAIC,EAAiD,GACrDP,EAAQQ,SAAQ,SAACH,GAAD,OAAoBE,EAAWE,KAAK,CAAE1E,MAAOsE,EAAQhE,MAAOgE,OAC5EF,EAAWI,KACV,CAACP,IAGF,kBAAC,GAAD,KACE,kBAAC,GAAD,KACGxG,EAAO,kBAAC,GAAD,CAAMA,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4D4C,GAE3D6D,EAAKrC,OAAS,GACb,kBAAC6C,GAAD,CACEC,SAAS,EACTC,aAAa,EACbC,aAAc,CAAE9E,MAAOA,EAAOM,MAAON,GACrC+E,gBAAgB,eAChBd,QAASE,EACT5D,SAAU,SAAC0D,GAAD,OAA+CI,EAAaJ,IACtEe,KAAG,MASP7B,GAAQpF,IAAOuC,MAAV,MACA,qBAAGrC,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mBAW1ChB,GAAOC,YAAOC,IAAPD,CAAH,MAMC,qBAAGE,MAAkBC,KAAKC,aAG/BiF,GAAYrF,IAAOO,IAAV,MAITqG,GAAe5G,YAAOkH,KAAPlH,CAAH,MAMI,qBAAGE,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,SAIzB,qBAAGJ,MAAkB8E,MAAM1E,SAGhB,qBAAGJ,MAAkB8E,MAAMjE,mBAK3B,qBAAGb,MAAkB8E,MAAMjE,mBAGzB,qBAAGb,MAAkBG,QAAQU,mBACxC,qBAAGb,MAAkBG,QAAQC,SAGlB,qBAAGJ,MAAkBG,QAAQU,mBACxC,qBAAGb,MAAkBG,QAAQC,SC/G/B6G,GAAqB,SAAC3B,GACjC,IAAIU,EAAoB,GACxB,IAAK,IAAMjE,KAASuD,EACd4B,MAAMC,OAAOpF,KACfiE,EAAQS,KAAK1E,GAGjB,OAAOiE,G,8iBCWT,IAsEeoB,GAtEQ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQzF,EAAqB,EAArBA,OAChC,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC0F,GAAD,KACE,kBAACnF,EAAA,EAAD,CACEJ,MAAOsF,EAAOjF,KACdC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKyF,GAAN,IAAcjF,KAAMA,QAEhD,kBAAC,GAAD,CACEL,QAASsF,EAAOE,OAChBlF,MAAM,WACNC,SAAU,SAACiF,GAAD,OAAY3F,EAAO,2BAAKyF,GAAN,IAAcE,OAAQA,SAGtD,kBAAC,GAAD,CACExF,MAAOsF,EAAOG,KACdnF,MAAM,OACNC,SAAU,SAACkF,GAAD,OAAU5F,EAAO,2BAAKyF,GAAN,IAAcG,KAAMA,QAEhD,kBAAC,GAAD,CACEzF,MAAOsF,EAAOhC,KACdW,QAASiB,GAAmBQ,MAC5BpF,MAAO,OACP4D,QAAS,kBAAMrE,EAAO,2BAAKyF,GAAN,IAAchC,KAAMoC,KAAWC,WACpDpF,SAAU,SAAC+C,GAAD,OAAkBzD,EAAO,2BAAKyF,GAAN,IAAchC,KAAMA,QAExD,kBAAC,GAAD,CACEtD,MAAOsF,EAAOM,SACd3B,QAAS,CACP4B,KAAeC,QACfD,KAAeE,OACfF,KAAeG,SACfH,KAAeI,QAEjB3F,MAAO,WACP4D,QAAS,kBAAMrE,EAAO,2BAAKyF,GAAN,IAAcM,SAAU,OAC7CrF,SAAU,SAACqF,GAAD,OACR/F,EAAO,2BAAKyF,GAAN,IAAcM,SAAUA,QAGlC,kBAAC,GAAD,CACE5F,MAAOsF,EAAOY,aACd5F,MAAM,eACN7C,KAAM0I,IACN5F,SAAU,SAAC2F,GAAD,OACRrG,EAAO,2BAAKyF,GAAN,IAAcY,aAAcA,QAGtC,kBAAC,GAAD,CACElG,MAAOsF,EAAOc,OACd9F,MAAM,SACN7C,KAAM0I,IACN5F,SAAU,SAAC6F,GAAD,OAAYvG,EAAO,2BAAKyF,GAAN,IAAcc,OAAQA,QAEnDd,EAAOE,QAAUF,EAAOhC,MACvB,kBAAClD,EAAA,EAAD,CACEJ,MAAOsF,EAAOe,iBACd/F,MAAM,oBACNC,SAAU,SAAC8F,GAAD,OACRxG,EAAO,2BAAKyF,GAAN,IAAce,iBAAkBA,WAW9ClG,GAAgBpC,IAAOO,IAAV,MAMbiH,GAAaxH,IAAOO,IAAV,MAOVoD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,S,w1ECrFrC,IAoGeiI,GApGI,SAAC,GAAwB,IAAtBhB,EAAqB,EAArBA,OAChBiB,EAAUC,eAD2B,EAEjBlF,mBAAiB,IAFA,mBAElCmF,EAFkC,KAE5BC,EAF4B,OAGjBpF,oBAAkB,GAHD,mBAGlCqF,EAHkC,KAG5BC,EAH4B,KAoCzC,OA/BArC,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIM,EAAU,CACZC,SAAUP,EAAQlG,KAAO,kBACzB0G,OAAQ,CACN,CACEC,OAAQ,CACN3G,KAAMiF,EAAOjF,MAEf4G,OAAQ,CACN,CACE5G,KAAM,OACNL,MAAOsF,EAAOG,KAAOH,EAAOG,KAAO,IACnCyB,QAAQ,GAEV,CACE7G,KAAM,eACNL,MAAOmH,aAAkB7B,EAAOY,eAElC,CACE7F,KAAM,SACNL,MAAOmH,aAAkB7B,EAAOc,aAM1CM,EAAQU,KAAKC,UAAUR,OAExB,CAACvB,EAAQiB,IAGV,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACe,GAAD,KACE,2BAAIhC,EAAOG,OAGb,kBAAC,GAAD,KACE,2BAAIH,EAAOjF,OAGb,kBAACkH,GAAD,KACE,kBAAC,GAAD,KACE,kBAACC,GAAD,mBACClC,EAAOM,UAEV,kBAAC,GAAD,KACE,kBAAC4B,GAAD,eACClC,EAAOhC,KAAQgC,EAAOE,OAAS,UAAY,SAAY,YAG5D,kBAACiC,GAAD,KACE,kBAACD,GAAD,uBACA,kBAAC9E,EAAA,EAAD,CAAchD,KAAM4F,EAAOY,gBAE7B,kBAACuB,GAAD,KACE,kBAACD,GAAD,eACA,kBAAC9E,EAAA,EAAD,CAAchD,KAAM4F,EAAOhC,QAE7B,kBAACmE,GAAD,KACE,kBAACD,GAAD,iBACA,kBAAC9E,EAAA,EAAD,CAAchD,KAAM4F,EAAOc,UAE5Bd,EAAOE,QAAUF,EAAOhC,MACvB,kBAACiE,GAAD,KACE,kBAACC,GAAD,4BACA,kBAAC,GAAD,KAAOlC,EAAOe,mBAGlB,kBAACkB,GAAD,UACe5D,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAU4F,EAAOjF,MACrB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAU4F,EAAOjF,MACrB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,QAGxBD,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAMzC,EAAQzG,KAAM,aAS9CsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BiJ,GAAOvJ,IAAOO,IAAV,MAWY,qBAAGL,MAAkBc,KAAKD,mBAG1C2C,GAAO1D,IAAOO,IAAV,MAiBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MAUXgE,GAAOvE,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mBAG1C0I,GAAYzJ,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,uBAK/BR,GAAO1J,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mB,u7EC3MhD,IA2HeoJ,GA3HE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KACd5B,EAAUC,eADuB,EAEblF,mBAAiB,IAFJ,mBAE9BmF,EAF8B,KAExBC,EAFwB,OAGbpF,oBAAkB,GAHL,mBAG9BqF,EAH8B,KAGxBC,EAHwB,OAIPtF,mBAAmB,IAJZ,mBAI9B8G,EAJ8B,KAIrBC,EAJqB,KAKjCC,EAAUC,cAoCd,OAlCAhE,qBAAU,WACRiE,YAAU,WAAW,SAACC,GACpBJ,EAAWI,QAEZ,CAACN,IAEJ5D,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIM,EAAU,CACZC,SAAUP,EAAQlG,KAAO,kBACzB0G,OAAQ,CACN,CACEC,OAAQ,CACN3G,KAAM8H,EAAK9H,MAEb4G,OAAQ,CACN,CACE5G,KAAM,KACNL,MAAOmI,EAAKO,GAAKP,EAAKO,GAAK,IAC3BxB,QAAQ,GAEV,CACE7G,KAAM,mBACNL,MAAOmI,EAAKQ,gBAAkBR,EAAKQ,gBAAkB,IACrDzB,QAAQ,OAMlBR,EAAQU,KAAKC,UAAUR,OAExB,CAACsB,EAAM5B,IAGR,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,2BAAI4B,EAAK9H,OAGX,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,aACC8H,EAAKO,IAER,kBAAC,GAAD,KACE,kBAAC,GAAD,kBACCP,EAAKS,SAER,kBAAC,GAAD,KACE,kBAAC,GAAD,eACCT,EAAKU,MAER,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACCV,EAAKW,QAER,kBAAC,GAAD,KACE,kBAAC,GAAD,2BACCX,EAAKQ,iBAER,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACCR,EAAKY,OAEV,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACA,kBAACrG,EAAA,EAAD,CAAchD,KAAMyI,EAAKa,gBAI3B,kBAAC,GAAD,KACGb,EAAKC,QAAQtG,OAAS,GACrBqG,EAAKC,QAAQ1H,KAAI,SAAC4E,EAAQrF,GAAmB,IAAD,EACpCgJ,EACJ,gCACAb,EAAQc,QAAO,SAACC,GAAD,OAASA,EAAI9I,OAASiF,KAAQ,UAD7C,aACA,EAAiD8D,IACnD,OACE,kBAACC,GAAD,CAAYxI,IAAKZ,EAAOpC,QAAS,kBAAMyK,EAAQ5D,KAAKuE,KACjD3D,OAKX,kBAAC,GAAD,KACG6C,EAAKmB,MAAMxH,OAAS,GACnBqG,EAAKmB,MAAM5I,KAAI,SAAC6I,EAAMtJ,GAAP,OACb,kBAAC,GAAD,CAAMY,IAAKZ,GAAQsJ,OAGzB,kBAAC,GAAD,UACe5F,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAUyI,EAAK9H,MACnB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAUyI,EAAK9H,MACnB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,QAGxBD,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAMI,EAAMtJ,KAAM,aAS5CsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BoD,GAAO1D,IAAOO,IAAV,MAmBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MAUXgE,GAAOvE,IAAOO,IAAV,MAkBY,qBAAGL,MAAkBc,KAAKD,mBAG1C0I,GAAYzJ,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,uBAK/BoB,GAAatL,IAAOiK,KAAV,MAEM,qBAAG/J,MAAkBc,KAAKkJ,uBAarC,qBAAGhK,MAAkBc,KAAKD,mBAO/B2I,GAAO1J,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mB,05CC7OhD,IAqEe0K,GArES,SAAC,GAQV,IAPbC,EAOY,EAPZA,YACAC,EAMY,EANZA,QACA1J,EAKY,EALZA,MACAM,EAIY,EAJZA,MACA7C,EAGY,EAHZA,KACAC,EAEY,EAFZA,UACA6C,EACY,EADZA,SACY,EACWe,mBAA4BmI,GAA5CE,EADK,sBAEkBrI,mBAAoB,IAFtC,mBAEL2C,EAFK,KAEIG,EAFJ,OAGkC9C,mBAAoB,IAHtD,mBAGLsI,EAHK,KAGYC,EAHZ,KAKNC,EAAeC,sBAAW,uCAC9B,WAAOJ,GAAP,eAAAK,EAAA,6DACMC,EAAiC,GACrCN,EAAalF,SAAQ,SAACyF,GACpBD,EAASvF,KAAKyF,YAAyBD,OAAmBvG,IAAZ+F,EAAwBA,EAAU,QAHpF,SAKwBU,QAAQC,IAAIJ,GALpC,cAMUxF,SAAQ,SAAC6F,GACflG,GAAW,SAACmG,GAAD,OAAOA,EAAEC,OAAOF,SAP/B,2CAD8B,sDAW9B,CAACZ,IAGHnF,qBAAU,WACoB,kBAAjBoF,GACTc,YAAkBd,OAA0BhG,IAAZ+F,EAAwBA,EAAU,IAAI,SAAC3B,GACrE3D,EAAW2D,MAGX4B,aAAwBe,OAASf,EAAa7H,OAAS,GACzDgI,EAAaH,KAEd,CAACA,EAAcG,EAAcJ,IAEhC,IAAMiB,EAAWZ,uBACf,SAACa,GACCrK,EAASqK,GACT,IAAIpG,EAAaP,EAAQiF,QAAO,SAAC5E,GAC/B,OAAOA,EAAOjE,KAAK0B,SAAS6I,MAE9Bf,EAAmBrF,KAErB,CAACP,EAAS1D,IAGZ,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACG9C,EAAO,kBAAC,GAAD,CAAMA,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4D4C,GAE5D,kBAAC,GAAD,CAAOgD,KAAK,OAAOtD,MAAOA,EAAOO,SAAU,SAACgD,GAAD,OAAOoH,EAASpH,EAAEC,OAAOxD,UACpE,kBAAC6K,GAAD,KACGjB,EAAgB9H,OAAS,GACxB8H,EAAgBlJ,KAAI,SAACoK,EAAK7K,GACxB,OACE,kBAAC8K,GAAD,CAAQlK,IAAKZ,EAAOpC,QAAS,SAAC0F,GAAD,OAAOoH,EAASG,EAAIzK,QAC9CyK,EAAIzK,YAWf8C,GAAQpF,IAAOuC,MAAV,MACA,qBAAGrC,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mBAgB1ChB,GAAOC,YAAOC,IAAPD,CAAH,MAMC,qBAAGE,MAAkBC,KAAKC,aAG/BiF,GAAYrF,IAAOO,IAAV,MAITuM,GAAU9M,IAAOO,IAAV,MAgBPyM,GAAShN,IAAOO,IAAV,MAGD,qBAAGL,MAAkB8E,MAAM1E,SAChB,qBAAGJ,MAAkB8E,MAAMjE,mBAK3CuE,GAAQtF,IAAOgF,MAAV,MAMW,qBAAG9E,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,QAIxBwM,I,4iBC3Id,IA6HeG,GA7HM,SAAC,GAA8B,IAA5B7C,EAA2B,EAA3BA,KAAMtI,EAAqB,EAArBA,OA+B5B,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACO,EAAA,EAAD,CACEJ,MAAOmI,EAAK9H,KACZC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKsI,GAAN,IAAY9H,KAAMA,QAE9C,kBAAC,GAAD,CACEL,MAAOmI,EAAKO,GACZpI,MAAM,KACNC,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKsI,GAAN,IAAYO,GAAI1I,QAE7C,kBAAC,GAAD,CACEA,MAAOmI,EAAKS,QACZtI,MAAM,UACNC,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKsI,GAAN,IAAYS,QAAS5I,QAElD,kBAAC,GAAD,CACEA,MAAOmI,EAAKW,OACZxI,MAAM,SACNC,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKsI,GAAN,IAAYW,OAAQ9I,QAEjD,kBAACI,EAAA,EAAD,CACEJ,MAAOmI,EAAKU,KACZvI,MAAM,OACNC,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKsI,GAAN,IAAYU,KAAM7I,QAE/C,kBAACI,EAAA,EAAD,CACEJ,MAAOmI,EAAKQ,gBACZrI,MAAM,mBACNC,SAAU,SAACoI,GAAD,OACR9I,EAAO,2BAAKsI,GAAN,IAAYQ,gBAAiBA,QAGvC,kBAAC,GAAD,CACE3I,MAAOmI,EAAKY,MACZ9E,QAASiB,GAAmB+F,MAC5B3K,MAAO,QACP4D,QAAS,kBAAMrE,EAAO,2BAAKsI,GAAN,IAAYY,MAAOkC,KAAWC,UACnD3K,SAAU,SAACP,GACTH,EAAO,2BAAKsI,GAAN,IAAYY,MAAO/I,QAG7B,kBAAC,GAAD,CACEA,MAAOmI,EAAKa,YACZ1I,MAAM,SACN7C,KAAM0I,IACN5F,SAAU,SAACyI,GAAD,OAAiBnJ,EAAO,2BAAKsI,GAAN,IAAYa,YAAaA,QAE3Db,EAAKC,QAAQ1H,KAAI,SAAC4E,EAAgBrF,GACjC,OACE,kBAACkL,GAAD,CAAWtK,IAAKZ,GACd,kBAAC,GAAD,CACEwJ,YAAa,UACbC,QAAS,CAAC,CAAE0B,UAAW,SAAUpL,OAAO,EAAOqL,KAAM,IACrDrL,MAAOsF,EACPhF,MAAM,SACNC,SAAU,SAAC+K,GAAD,OA/ED,SAACA,EAAmBC,GACzC,IAAInD,EAAO,YAAOD,EAAKC,SACvBA,EAAQmD,GAAKD,EACbzL,EAAO,2BAAKsI,GAAN,IAAYC,QAASA,KA4EUoD,CAAeF,EAAWrL,MAErD,kBAACe,EAAA,EAAD,CAAYvD,KAAMwD,IAASpD,QAAS,kBA1F3B,SAAC4N,GACpB,IAAIC,EAAgBvD,EAAKC,QAAQc,QAAO,SAAC5D,GAAD,OAAYA,IAAWmG,KAC/D5L,EAAO,2BAAKsI,GAAN,IAAYC,QAASsD,KAwFyBC,CAAarG,UAI7D,kBAAC7F,EAAA,EAAD,CACEC,KAAM,iBACNjC,KAAM2D,IACNvD,QAAS,kBA7FI,WACnB,IAAI6N,EAAa,YAAOvD,EAAKC,SAC7BsD,EAAchH,KAAK,IACnB7E,EAAO,2BAAKsI,GAAN,IAAYC,QAASsD,KA0FNE,MAGhBzD,EAAKmB,MAAM5I,KAAI,SAAC6I,EAActJ,GAC7B,OACE,kBAACkL,GAAD,CAAWtK,IAAKZ,GACd,kBAAC,GAAD,CACEwJ,YAAa,UACbC,QAAS,CAAC,CAAE0B,UAAW,SAAUpL,OAAO,EAAMqL,KAAM,IACpDrL,MAAOuJ,EACPjJ,MAAM,OACNC,SAAU,SAACsL,GAAD,OApFH,SAACA,EAAiBN,GACrC,IAAIjC,EAAK,YAAOnB,EAAKmB,OACrBA,EAAMiC,GAAKM,EACXhM,EAAO,2BAAKsI,GAAN,IAAYmB,MAAOA,KAiFUwC,CAAaD,EAAS5L,MAE/C,kBAACe,EAAA,EAAD,CAAYvD,KAAMwD,IAASpD,QAAS,kBA/F7B,SAACkO,GAClB,IAAIC,EAAc7D,EAAKmB,MAAMJ,QAAO,SAACK,GAAD,OAAUA,IAASwC,KACvDlM,EAAO,2BAAKsI,GAAN,IAAYmB,MAAO0C,KA6F2BC,CAAW1C,UAI3D,kBAAC9J,EAAA,EAAD,CACEC,KAAM,eACNjC,KAAM2D,IACNvD,QAAS,kBAlGE,WACjB,IAAImO,EAAW,YAAO7D,EAAKmB,OAC3B0C,EAAYtH,KAAK,IACjB7E,EAAO,2BAAKsI,GAAN,IAAYmB,MAAO0C,KA+FJE,SASnB/L,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAY/B8M,GAAYpN,IAAOO,IAAV,M,+sFCrJf,IA+Ge6N,GA/GG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MACf7F,EAAUC,eADyB,EAEflF,mBAAiB,IAFF,mBAEhCmF,EAFgC,KAE1BC,EAF0B,OAGfpF,oBAAkB,GAHH,mBAGhCqF,EAHgC,KAG1BC,EAH0B,KAiCvC,OA5BArC,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIM,EAAU,CACZC,SAAUP,EAAQlG,KAAO,kBACzB0G,OAAQ,CACN,CACEC,OAAQ,CACN3G,KAAM+L,EAAM/L,MAEd4G,OAAQ,CACN,CACE5G,KAAM,SACNL,MAAOoM,EAAMC,OAASD,EAAMC,OAAS,IACrCnF,QAAQ,GAEV,CACE7G,KAAM,eACNL,MAAOoM,EAAME,SAAWF,EAAME,SAAW,IACzCpF,QAAQ,OAMlBR,EAAQU,KAAKC,UAAUR,OAExB,CAACuF,EAAO7F,IAGT,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACgG,GAAD,CAAQC,OAAQJ,EAAMI,OAAOlM,OAAQ8L,EAAMI,OAAOlM,OAElD,kBAACmM,GAAD,KACE,2BAAIL,EAAMM,QAEXN,EAAMO,eACL,kBAACF,GAAD,KACE,iCAGHL,EAAMQ,OACL,kBAACH,GAAD,KACE,iCAIJ,kBAAC,GAAD,KACE,2BAAIL,EAAM/L,OAGZ,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACC+L,EAAMC,OAAO/L,OAEhB,kBAAC,GAAD,KACE,kBAAC,GAAD,uBACC8L,EAAME,SAAShM,OAElB,kBAAC,GAAD,KACE,kBAAC,GAAD,eACC8L,EAAMS,KAAKvM,OAEd,kBAAC,GAAD,KACE,kBAAC,GAAD,gBACC8L,EAAM5J,MAAMlC,QAGjB,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACA,kBAACoC,EAAA,EAAD,CAAchD,KAAM0M,EAAMhG,UAE5B,kBAAC,GAAD,KACE,kBAAC,GAAD,kBACA,kBAAC1D,EAAA,EAAD,CAAchD,KAAM0M,EAAMU,WAE5B,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACA,kBAACpK,EAAA,EAAD,CAAchD,KAAM0M,EAAMW,UAE5B,kBAAC,GAAD,UACepJ,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAU0M,EAAM/L,MACpB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAU0M,EAAM/L,MACpB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,QAGxBD,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAMqE,EAAOvN,KAAM,aAS7CsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BoD,GAAO1D,IAAOO,IAAV,MAiBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MAUXgE,GAAOvE,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mBAG1C0I,GAAYzJ,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,uBAS/BsE,GAASxO,IAAOO,IAAV,MAcU,qBAAGL,MAAkBc,KAAKD,mBACrC,SAACF,GACR,MAAqB,eAAjBA,EAAM4N,OACD,UACmB,gBAAjB5N,EAAM4N,OACR,UACmB,cAAjB5N,EAAM4N,OACR,UACmB,eAAjB5N,EAAM4N,OACR,UACmB,gBAAjB5N,EAAM4N,OACR,UACmB,kBAAjB5N,EAAM4N,OACR,UACmB,eAAjB5N,EAAM4N,OACR,UACmB,aAAjB5N,EAAM4N,OACR,UAEA,WAKPC,GAAO1O,IAAOO,IAAV,MAWY,qBAAGL,MAAkBc,KAAKD,mBAG1C2I,GAAO1J,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mB,ugBCxOhD,IAsfekO,GAtfO,SAAC,GAA2C,IAAD,YAAxCZ,EAAwC,EAAxCA,MAAOa,EAAiC,EAAjCA,WAAYpN,EAAqB,EAArBA,OAqB1C,OApBA0E,qBAAU,WAEN6H,EAAM/L,KAAKyB,OAAS,GACpBsK,EAAMI,OAAOlM,QAAU4M,KAAYC,KAAK7M,OACxC8L,EAAMC,OAAO/L,QAAU8M,KAAYD,KAAK7M,OACxC8L,EAAMiB,MAAM/M,QAAUgN,KAAWH,KAAK7M,OACtC8L,EAAMS,KAAKvM,QAAUiN,KAAUJ,KAAK7M,OACpC8L,EAAMoB,SAASlN,QAAUmN,KAAcN,KAAK7M,OAC5C8L,EAAMsB,UAAUpN,QAAUqN,KAAeR,KAAK7M,OAC9C8L,EAAME,SAAShM,QAAUsN,KAAcT,KAAK7M,OAC5C8L,EAAMyB,YAAYvN,QAAUwN,KAAYX,KAAK7M,OAC7C8L,EAAM5J,MAAMlC,QAAUyN,KAAWZ,KAAK7M,OACtC8L,EAAM4B,cAAc1N,QAAU2N,KAAmBd,KAAK7M,MAEtD2M,GAAW,GAEXA,GAAW,KAEZ,CAACb,EAAOa,IAGT,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC7M,EAAA,EAAD,CACEJ,MAAOoM,EAAM/L,KACbC,MAAM,SACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKuM,GAAN,IAAa/L,KAAMA,QAE/C,kBAAC,GAAD,CACEL,MAAOoM,EAAMI,OAAOlM,MACpB2D,QAASiJ,KAAYgB,SACrB5N,MAAO,WACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BI,OAAQU,KAAYC,UAEzD5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BI,OAAQU,KAAYmB,KAAKrO,UAI3D,kBAAC,GAAD,CACEA,MAAOoM,EAAMC,OAAO/L,MACpB2D,QAASmJ,KAAYc,SACrB5N,MAAO,WACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BC,OAAQe,KAAYD,UAEzD5M,SAAU,SAACqF,GACT/F,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BC,OAAQe,KAAYiB,KAAKzI,UAI3D,kBAAC,GAAD,CACE5F,MAAOoM,EAAMiB,MAAM/M,MAAQ,GAC3B2D,QAASqJ,KAAWY,SACpB5N,MAAO,UACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BiB,MAAOC,KAAWH,UAEvD5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BiB,MAAOC,KAAWe,KAAKrO,UAIzD,kBAAC,GAAD,CACEA,MAAOoM,EAAMM,MACbpM,MAAM,UACNC,SAAU,SAACmM,OAEb,kBAAC,GAAD,CACE1M,MAAOoM,EAAMkC,WACbhO,MAAM,cACNC,SAAU,SAACP,GACTH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BkC,WAAYtO,SAGnD,kBAAC,GAAD,CACEA,MAAOoM,EAAMO,cACbrM,MAAM,kBACNC,SAAU,SAACP,GACTH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BO,cAAe3M,SAGtD,kBAAC,GAAD,CACEA,MAAOoM,EAAMQ,MACbtM,MAAM,gBACNC,SAAU,SAACP,GACTH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BQ,MAAO5M,SAG9C,kBAACuO,GAAD,MACA,kBAAC,GAAD,CACEvO,MAAOoM,EAAMS,KAAKvM,MAClB2D,QAASsJ,KAAUW,SACnB5N,MAAO,SACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BS,KAAMU,KAAUJ,UAErD5M,SAAU,SAACqF,GACT/F,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BS,KAAMU,KAAUc,KAAKzI,UAIvD,kBAAC,GAAD,CACE5F,MAAOoM,EAAMoB,SAASlN,MACtB2D,QAASwJ,KAAcS,SACvB5N,MAAO,aACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BoB,SAAUC,KAAcN,UAE7D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BoB,SAAUC,KAAcY,KAAKrO,UAI/D,kBAAC,GAAD,CACEA,MAAOoM,EAAMsB,UAAUpN,MACvB2D,QACEmI,EAAMI,OAAOlM,QAAU4M,KAAYsB,WAAWlO,MAC1CqN,KAAeO,SACf,CAACP,KAAec,KAAKnO,OAE3BA,MAAO,eACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BsB,UAAWC,KAAeR,UAG1D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEEsB,UAAWC,KAAeU,KAAKrO,UAKvC,kBAAC,GAAD,CACEA,MAAOoM,EAAME,SAAShM,MACtB2D,QACEmI,EAAMsB,UAAUpN,QAAUqN,KAAee,SAASpO,MAC9CsN,KAAce,iBACdf,KAAcgB,aAEpBtO,MAAO,iBACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BE,SAAUsB,KAAcT,UAE7D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BE,SAAUsB,KAAcS,KAAKrO,UAI/D,kBAACuO,GAAD,MACA,kBAAC,GAAD,CACEvO,MAAOoM,EAAMyB,YAAYvN,MACzB2D,QAAS6J,KAAYI,SACrB5N,MAAO,iBACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4ByB,YAAaC,KAAYX,UAE9D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEEyB,YAAaC,KAAYO,KAAKrO,UAKtC,kBAAC,GAAD,CACEA,MAAOoM,EAAM5J,MAAMlC,MACnB2D,QAAS8J,KAAWG,SACpB5N,MAAO,UACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B5J,MAAOuL,KAAWZ,UAEvD5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B5J,MAAOuL,KAAWM,KAAKrO,UAIzD,kBAAC,GAAD,CACEA,MAAOoM,EAAM4B,cAAc1N,MAC3B2D,QAASgK,KAAmBC,SAC5B5N,MAAO,mBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE4B,cAAeC,KAAmBd,UAIxC5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE4B,cAAeC,KAAmBI,KAAKrO,UAK9CoM,EAAM5J,MAAMlC,QAAUyN,KAAWc,QAAQvO,OACxC,kBAAC,GAAD,CACEN,MAAOoM,EAAM0C,eAAexO,MAC5B2D,QACEmI,EAAMyB,YAAYvN,QAAUwN,KAAYiB,IAAIzO,MACxC0O,KAAoBd,SACpBc,KAAoBC,eAE1B3O,MAAO,kBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE0C,eAAgBE,KAAoB7B,UAI1C5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE0C,eAAgBE,KAAoBX,KAAKrO,UAMlDoM,EAAM5J,MAAMlC,QAAUyN,KAAWc,QAAQvO,OACxC8L,EAAM0C,eAAexO,QAAU0O,KAAoBE,MAAM5O,OACvD,kBAAC,GAAD,CACEN,MAAOoM,EAAM+C,iBAAiB7O,MAC9B2D,QAASmL,KAAsBlB,SAC/B5N,MAAO,oBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE+C,iBAAkBC,KAAsBjC,UAI9C5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE+C,iBAAkBC,KAAsBf,KAAKrO,UAMxDoM,EAAM5J,MAAMlC,QAAUyN,KAAWsB,MAAM/O,OACtC8L,EAAM5J,MAAMlC,QAAUyN,KAAWuB,MAAMhP,OACvC8L,EAAM5J,MAAMlC,QAAUyN,KAAWwB,SAASjP,OAC1C8L,EAAM5J,MAAMlC,QAAUyN,KAAWyB,UAAUlP,OACzC,kBAAC,GAAD,CACEN,MAAOoM,EAAMqD,SAASnP,MACtB2D,QAASyL,KAAcxB,SACvB5N,MAAO,sBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BqD,SAAUC,KAAcvC,UAGxD5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEEqD,SAAUC,KAAcrB,KAAKrO,UAMxCoM,EAAMyB,YAAYvN,QAAUwN,KAAYiB,IAAIzO,OAC3C8L,EAAM5J,MAAMlC,QAAUyN,KAAWuB,MAAMhP,OACvC8L,EAAM5J,MAAMlC,QAAUyN,KAAW4B,cAAcrP,OAC7C,kBAAC,GAAD,CACEN,MAAOoM,EAAMwD,UAAUtP,MACvB2D,QAAS4L,KAAe3B,SACxB5N,MAAO,wBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BwD,UAAWC,KAAe1C,UAG1D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEEwD,UAAWC,KAAexB,KAAKrO,UAM3C,kBAACuO,GAAD,MACA,kBAAC,GAAD,CACEvO,MAAK,UAAEoM,EAAM0D,OAAO,UAAf,aAAE,EAAiBxP,MACxB2D,QAAS8L,KAAY7B,SACrB5N,MAAO,mBACP4D,QAAS,WACP,IAAI8L,EAAK,YAAO5D,EAAM0D,QACtBE,EAAM,GAAKD,KAAY5C,KACvBtN,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B0D,OAAQE,OAE7CzP,SAAU,SAACP,GACT,IAAIgQ,EAAK,YAAO5D,EAAM0D,QACtBE,EAAM,GAAKD,KAAY1B,KAAKrO,GAC5BH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B0D,OAAQE,SAG/C,kBAAC,GAAD,CACEhQ,MAAK,UAAEoM,EAAM0D,OAAO,UAAf,aAAE,EAAiBxP,MACxB2D,QAAS8L,KAAY7B,SACrB5N,MAAO,mBACP4D,QAAS,WACP,IAAI8L,EAAK,YAAO5D,EAAM0D,QACtBE,EAAM,GAAKD,KAAY5C,KACvBtN,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B0D,OAAQE,OAE7CzP,SAAU,SAACP,GACT,IAAIgQ,EAAK,YAAO5D,EAAM0D,QACtBE,EAAM,GAAKD,KAAY1B,KAAKrO,GAC5BH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B0D,OAAQE,SAG/C,kBAAC,GAAD,CACEhQ,MAAK,UAAEoM,EAAM0D,OAAO,UAAf,aAAE,EAAiBxP,MACxB2D,QAAS8L,KAAY7B,SACrB5N,MAAO,mBACP4D,QAAS,WACP,IAAI8L,EAAK,YAAO5D,EAAM0D,QACtBE,EAAM,GAAKD,KAAY5C,KACvBtN,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B0D,OAAQE,OAE7CzP,SAAU,SAACP,GACT,IAAIgQ,EAAK,YAAO5D,EAAM0D,QACtBE,EAAM,GAAKD,KAAY1B,KAAKrO,GAC5BH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B0D,OAAQE,UAGlB,MAA3B,UAAA5D,EAAM0D,OAAO,UAAb,eAAiBxP,QACU,MAA3B,UAAA8L,EAAM0D,OAAO,UAAb,eAAiBxP,QACU,MAA3B,UAAA8L,EAAM0D,OAAO,UAAb,eAAiBxP,SACjB,kBAAC,GAAD,CACEN,MAAOoM,EAAM6D,WAAW3P,MACxB2D,QAASiM,KAAgBhC,SACzB5N,MAAO,cACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B6D,WAAYC,KAAgB/C,UAG5D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE6D,WAAYC,KAAgB7B,KAAKrO,UAM3C,kBAAC,GAAD,CACEA,MAAOoM,EAAM+D,cAAc7P,MAC3B2D,QAASmM,KAAmBlC,SAC5B5N,MAAO,kBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE+D,cAAeC,KAAmBjD,UAIxC5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE+D,cAAeC,KAAmB/B,KAAKrO,UAM/C,kBAACuO,GAAD,MACA,kBAAC,GAAD,CACEvO,MAAOoM,EAAMiE,cAAc/P,MAC3B2D,QAASqM,KAAmBpC,SAC5B5N,MAAO,iBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEEiE,cAAeC,KAAmBnD,UAIxC5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEEiE,cAAeC,KAAmBjC,KAAKrO,UAK9CoM,EAAMiE,cAAc/P,QACnBgQ,KAAmBC,2BAA2BjQ,OAC9C,oCACE,kBAAC,GAAD,CACEN,MAAOoM,EAAMvD,KAAKvI,MAClB2D,QAASuM,KAAUtC,SACnB5N,MAAO,wBACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BvD,KAAM2H,KAAUrD,UAErD5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4BvD,KAAM2H,KAAUnC,KAAKrO,UAIvD,kBAAC,GAAD,CACEA,MAAOoM,EAAM1D,GAAGpI,MAChB2D,QAASwM,KAAQvC,SACjB5N,MAAO,mBACP4D,QAAS,kBACPrE,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B1D,GAAI+H,KAAQtD,UAEjD5M,SAAU,SAACP,GACTH,EAAOsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B1D,GAAI+H,KAAQpC,KAAKrO,WAK5D,kBAACuO,GAAD,OACEnC,EAAMoB,SAASlN,QAAUmN,KAAciD,WAAWpQ,OAClD8L,EAAMoB,SAASlN,QAAUmN,KAAckD,YAAYrQ,OACnD8L,EAAMoB,SAASlN,QAAUmN,KAAcmD,WAAWtQ,QAClD,kBAACF,EAAA,EAAD,CACEJ,MAAOoM,EAAMyE,aACbvQ,MAAM,WACNC,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKuM,GAAN,IAAayE,aAAc7Q,SAGxDoM,EAAM6D,WAAW3P,QAAU4P,KAAgBY,SAASxQ,OACpD8L,EAAM6D,WAAW3P,QAAU4P,KAAgBa,KAAKzQ,QAChD,kBAAC,GAAD,CACEN,MAAOoM,EAAM4E,WAAW1Q,MACxB2D,QAASgN,KAAgB/C,SACzB5N,MAAO,oBACP4D,QAAS,kBACPrE,EACEsO,KAAMC,UAAN,2BAAqBhC,GAArB,IAA4B4E,WAAYC,KAAgB9D,UAG5D5M,SAAU,SAACP,GACTH,EACEsO,KAAMC,UAAN,2BACKhC,GADL,IAEE4E,WAAYC,KAAgB5C,KAAKrO,UAM3C,kBAAC,GAAD,CACEA,MAAOoM,EAAMhG,OACb9F,MAAM,SACN7C,KAAM0I,IACN5F,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKuM,GAAN,IAAahG,OAAQpG,QAElD,kBAAC,GAAD,CACEA,MAAOoM,EAAMU,QACbxM,MAAM,UACN7C,KAAM0I,IACN5F,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKuM,GAAN,IAAaU,QAAS9M,QAEnD,kBAAC,GAAD,CACEA,MAAOoM,EAAMW,OACbzM,MAAM,SACN7C,KAAM0I,IACN5F,SAAU,SAACP,GAAD,OAAWH,EAAO,2BAAKuM,GAAN,IAAaW,OAAQ/M,WASpDG,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAY/BkQ,GAAYxQ,IAAOO,IAAV,M,8iBCniBf,IAiEe4S,GAjEO,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOtR,EAAqB,EAArBA,OAC9B,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACO,EAAA,EAAD,CACEJ,MAAOmR,EAAM9Q,KACbC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKsR,GAAN,IAAa9Q,KAAMA,SAGjD,kBAAC,GAAD,KACE,kBAAC,GAAD,CACEL,MAAOmR,EAAM1L,KACbnF,MAAM,OACNC,SAAU,SAACkF,GAAD,OAAU5F,EAAO,2BAAKsR,GAAN,IAAa1L,KAAMA,QAE/C,kBAAC,GAAD,CACEzF,QAASmR,EAAM7N,KACfhD,MAAM,aACNC,SAAU,SAAC+C,GAAD,OAAUzD,EAAO,2BAAKsR,GAAN,IAAa7N,KAAMA,QAE9C6N,EAAM7N,MACL,kBAAClD,EAAA,EAAD,CACEJ,MAAOmR,EAAMC,MACb9Q,MAAM,QACNC,SAAU,SAACkF,GAAD,OAAU5F,EAAO,2BAAKsR,GAAN,IAAaC,MAAO3L,QAGlD,kBAAC,GAAD,CACEzF,QAASmR,EAAME,QACf/Q,MAAM,YACNC,SAAU,SAAC+C,GAAD,OAAUzD,EAAO,2BAAKsR,GAAN,IAAaE,QAAS/N,QAElD,kBAAClD,EAAA,EAAD,CACEJ,MAAOmR,EAAMG,KACbhR,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKsR,GAAN,IAAaG,KAAMjR,SAGjD,kBAAC,GAAD,CACEL,MAAOmR,EAAMjL,aACb5F,MAAM,eACN7C,KAAM0I,IACN5F,SAAU,SAAC2F,GAAD,OACRrG,EAAO,2BAAKsR,GAAN,IAAajL,aAAcA,QAGrC,kBAAC,GAAD,CACElG,MAAOmR,EAAM/K,OACb9F,MAAM,SACN7C,KAAM0I,IACN5F,SAAU,SAAC6F,GAAD,OAAYvG,EAAO,2BAAKsR,GAAN,IAAa/K,OAAQA,QAEnD,kBAAC,GAAD,CACEpG,MAAOmR,EAAMI,OACbjR,MAAM,SACN7C,KAAM0I,IACN5F,SAAU,SAAC6F,GAAD,OAAYvG,EAAO,2BAAKsR,GAAN,IAAaI,OAAQnL,WASrDjG,GAAgBpC,IAAOO,IAAV,MAMbiH,GAAaxH,IAAOO,IAAV,MAOVoD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,S,ozEC9ErC,IAiHemT,GAjHG,SAAC,GAAuB,IAArBL,EAAoB,EAApBA,MACf5K,EAAUC,eADyB,EAEflF,mBAAiB,IAFF,mBAEhCmF,EAFgC,KAE1BC,EAF0B,OAGfpF,oBAAkB,GAHH,mBAGhCqF,EAHgC,KAG1BC,EAH0B,KA8CvC,OAzCArC,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIM,EAAU,CACZC,SAAUP,EAAQlG,KAAO,kBACzB0G,OAAQ,CACN,CACEC,OAAQ,CACN3G,KAAM8Q,EAAM9Q,MAEd4G,OAAQ,CACN,CACE5G,KAAM,OACNL,MAAOmR,EAAM1L,KAAO0L,EAAM1L,KAAO,IACjCyB,QAAQ,GAEV,CACE7G,KAAM,QACNL,MAAOmR,EAAMC,MAAQD,EAAMC,MAAQ,IACnClK,QAAQ,GAEV,CACE7G,KAAM,SACNL,MAAOmR,EAAM7N,KAAO6N,EAAMI,OAAS,UACnCrK,QAAQ,GAEV,CACE7G,KAAM,eACNL,MAAOmH,aAAkBgK,EAAMjL,eAEjC,CACE7F,KAAM,SACNL,MAAOmH,aAAkBgK,EAAM/K,aAMzCM,EAAQU,KAAKC,UAAUR,OAExB,CAACsK,EAAO5K,IAGT,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,2BAAI4K,EAAM1L,OAEZ,kBAAC,GAAD,KACE,2BAAI0L,EAAME,QAAU,IAAM,KAG5B,kBAAC,GAAD,KACE,2BAAIF,EAAM9Q,OAGZ,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,eACC8Q,EAAMG,MAET,kBAAC,GAAD,KACE,kBAAC,GAAD,eACCH,EAAM7N,KAAO,SAAW,WAE1B6N,EAAM7N,MACL,kBAAC,GAAD,KACE,kBAAC,GAAD,gBACC6N,EAAMC,QAIb,kBAAC,GAAD,KACE,kBAAC,GAAD,uBACA,kBAAC1O,EAAA,EAAD,CAAchD,KAAMyR,EAAMjL,gBAE5B,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACA,kBAACxD,EAAA,EAAD,CAAchD,KAAMyR,EAAM/K,UAE5B,kBAAC,GAAD,KACE,kBAAC,GAAD,iBACA,kBAAC1D,EAAA,EAAD,CAAchD,KAAMyR,EAAMI,UAE5B,kBAAC,GAAD,UACe5N,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAUyR,EAAM9Q,MACpB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAUyR,EAAM9Q,MACpB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,QAGxBD,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAMoJ,EAAOtS,KAAM,aAS7CsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BiJ,GAAOvJ,IAAOO,IAAV,MAWY,qBAAGL,MAAkBc,KAAKD,mBAG1C2C,GAAO1D,IAAOO,IAAV,MAiBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MAUXgE,GAAOvE,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mBAG1C0I,GAAYzJ,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,uBAK/BR,GAAO1J,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mB,ozEC3NhD,IAwGe2S,GAxGG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MACfnL,EAAUC,eADyB,EAEflF,mBAAiB,IAFF,mBAEhCmF,EAFgC,aAGfnF,oBAAkB,IAHH,mBAGhCqF,EAHgC,KAG1BC,EAH0B,KA8CvC,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,2BAAI8K,EAAMC,MAGZ,kBAAC,GAAD,KACE,2BAAID,EAAMrR,OAGZ,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,gBACCqR,EAAME,OAET,kBAAC,GAAD,KACE,kBAAC,GAAD,cACCF,EAAMG,KAET,kBAAC,GAAD,KACE,kBAAC,GAAD,oBACCH,EAAMI,WAET,kBAAC,GAAD,KACE,kBAAC,GAAD,uBACCJ,EAAMK,eAGX,kBAAC,GAAD,KACE,kBAAC,GAAD,kBACA,kBAACrP,EAAA,EAAD,CAAchD,KAAMgS,EAAMM,WAE5B,kBAAC,GAAD,UACerO,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAUgS,EAAMrR,MACpB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAUgS,EAAMrR,MACpB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,QAGxBD,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAM2J,EAAO7S,KAAM,aAS7CsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BiJ,GAAOvJ,IAAOO,IAAV,MAWY,qBAAGL,MAAkBc,KAAKD,mBAG1C2C,GAAO1D,IAAOO,IAAV,MAiBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MAUXgE,GAAOvE,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mBAG1C0I,GAAYzJ,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,uBAK/BR,GAAO1J,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mB,ujBC/MhD,IA2DemT,GA3DO,SAAC,GAA+B,IAA7BP,EAA4B,EAA5BA,MAAO7R,EAAqB,EAArBA,OAC9B,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACO,EAAA,EAAD,CACEJ,MAAO0R,EAAMrR,KACbC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAK6R,GAAN,IAAarR,KAAMA,SAGjD,kBAAC,GAAD,KACE,kBAAC,GAAD,CACEL,MAAO0R,EAAMC,IACb1N,QAAS,CACPiO,KAASC,MACTD,KAASE,KACTF,KAASG,OACTH,KAASI,KACTJ,KAASK,SAEXjS,MAAO,MACP4D,QAAS,kBAAMrE,EAAO,2BAAK6R,GAAN,IAAaC,IAAK,OACvCpR,SAAU,SAACqF,GAAD,OAAsB/F,EAAO,2BAAK6R,GAAN,IAAaC,IAAK/L,QAE1D,kBAAC,GAAD,CACE5F,MAAO0R,EAAME,MACbtR,MAAM,QACNC,SAAU,SAACkF,GAAD,OAAU5F,EAAO,2BAAK6R,GAAN,IAAaE,MAAOnM,QAEhD,kBAACrF,EAAA,EAAD,CACEJ,MAAO0R,EAAMG,IACbvR,MAAM,MACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAK6R,GAAN,IAAaG,IAAKxR,QAE9C,kBAAC,GAAD,CACEL,MAAO0R,EAAMI,UACbxR,MAAM,YACNC,SAAU,SAACkF,GAAD,OAAU5F,EAAO,2BAAK6R,GAAN,IAAaI,UAAWrM,QAEpD,kBAAC,GAAD,CACEzF,MAAO0R,EAAMK,aACbzR,MAAM,eACNC,SAAU,SAACkF,GAAD,OAAU5F,EAAO,2BAAK6R,GAAN,IAAaK,aAActM,SAGzD,kBAAC,GAAD,CACEzF,MAAO0R,EAAMM,QACb1R,MAAM,UACN7C,KAAM0I,IACN5F,SAAU,SAAC2F,GAAD,OACRrG,EAAO,2BAAK6R,GAAN,IAAaM,QAAS9L,WAUlC/F,GAAgBpC,IAAOO,IAAV,MAMbiH,GAAaxH,IAAOO,IAAV,MAOVoD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,S,ozECxErC,IAwEemU,GAxEE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KACdlM,EAAUC,eADuB,EAEblF,mBAAiB,IAFJ,mBAE9BmF,EAF8B,KAExBC,EAFwB,OAGbpF,oBAAkB,GAHL,mBAG9BqF,EAH8B,KAGxBC,EAHwB,KAgCrC,OA3BArC,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIM,EAAU,CACZC,SAAUP,EAAQlG,KAAO,kBACzB0G,OAAQ,CACN,CACEC,OAAQ,CACN3G,KAAMoS,EAAKpS,MAEb4G,OAAQ,CACN,CACE5G,KAAM,UACNL,MAAOyS,EAAKC,QAAUD,EAAKC,QAAU,IACrCxL,QAAQ,GAEV,CACE7G,KAAM,cACNL,MAAOmH,aAAkBsL,EAAKzJ,kBAMxCtC,EAAQU,KAAKC,UAAUR,OAExB,CAAC4L,EAAMlM,IAGR,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,2BAAIkM,EAAKC,UAGX,kBAAC,GAAD,KACE,2BAAID,EAAKpS,OAGX,kBAAC,GAAD,KACE,kBAAC,GAAD,sBACA,kBAACqC,EAAA,EAAD,CAAchD,KAAM+S,EAAKzJ,eAE3B,kBAAC,GAAD,UACerF,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAU+S,EAAKpS,MACnB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAU+S,EAAKpS,MACnB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,QAGxBD,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAM0K,EAAM5T,KAAM,aAS5CsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BiJ,GAAOvJ,IAAOO,IAAV,MAWY,qBAAGL,MAAkBc,KAAKD,mBAG1C2C,GAAO1D,IAAOO,IAAV,MAiBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MA6BXkJ,IAnBOzJ,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mBAG9Bf,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,wBAK/BR,GAAO1J,IAAOO,IAAV,MAgBY,qBAAGL,MAAkBc,KAAKD,mB,8iBClLhD,IA6Be6T,GA7BM,SAAC,GAA8B,IAA5BF,EAA2B,EAA3BA,KAAM5S,EAAqB,EAArBA,OAC5B,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACO,EAAA,EAAD,CACEJ,MAAOyS,EAAKpS,KACZC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAK4S,GAAN,IAAYpS,KAAMA,SAGhD,kBAAC,GAAD,KACE,kBAACD,EAAA,EAAD,CACEJ,MAAOyS,EAAKC,QACZpS,MAAM,UACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAK4S,GAAN,IAAYC,QAASrS,SAGnD,kBAAC,GAAD,CACEL,MAAOyS,EAAKzJ,YACZ1I,MAAM,cACN7C,KAAM0I,IACN5F,SAAU,SAAC6F,GAAD,OAAYvG,EAAO,2BAAK4S,GAAN,IAAYzJ,YAAa5C,WASzDjG,GAAgBpC,IAAOO,IAAV,MAMbiH,GAAaxH,IAAOO,IAAV,MAOVoD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,S,ktBC5CrC,IAwDeuU,GAxDW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,UAAWhT,EAAqB,EAArBA,OAgBtC,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACO,EAAA,EAAD,CACEJ,MAAO6S,EAAUxS,KACjBC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAKgT,GAAN,IAAiBxS,KAAMA,SAGrD,kBAAC,GAAD,KACE,kBAAC,GAAD,CACEL,QAAS6S,EAAUC,OACnBxS,MAAM,WACNC,SAAU,SAAC+C,GAAD,OAAUzD,EAAO,2BAAKgT,GAAN,IAAiBC,OAAQxP,SAGtDuP,EAAUE,OAAOrS,KAAI,SAACyQ,EAAelR,GACpC,OACE,kBAAC,GAAD,CAAWY,IAAKZ,GACd,kBAAC,GAAD,CACEwJ,YAAa,SACbzJ,MAAOmR,EACP7Q,MAAM,QACNC,SAAU,SAACyS,GAAD,OA9BF,SAACA,EAAkBzH,GACvC,IAAIwH,EAAM,YAAOF,EAAUE,QAC3BA,EAAOxH,GAAKyH,EACZnT,EAAO,2BAAKgT,GAAN,IAAiBE,OAAQA,KA2BKE,CAAcD,EAAU/S,MAElD,kBAACe,EAAA,EAAD,CAAYvD,KAAMwD,IAASpD,QAAS,kBAzC5B,SAACqV,GACnB,IAAIC,EAAeN,EAAUE,OAAO7J,QAAO,SAACiI,GAAD,OAAWA,IAAU+B,KAChErT,EAAO,2BAAKgT,GAAN,IAAiBE,OAAQI,KAuCqBC,CAAYjC,UAI5D,kBAAC1R,EAAA,EAAD,CACEC,KAAM,gBACNjC,KAAM2D,IACNvD,QAAS,kBA5CG,WAClB,IAAIsV,EAAY,YAAON,EAAUE,QACjCI,EAAazO,KAAK,IAClB7E,EAAO,2BAAKgT,GAAN,IAAiBE,OAAQI,KAyCVE,SASnBlT,GAAgBpC,IAAOO,IAAV,MAMbiH,GAAaxH,IAAOO,IAAV,MAOVoD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAY/B8M,GAAYpN,IAAOO,IAAV,M,yvDCnFf,IAqFegV,GArFO,SAAC,GAA2B,IAAzBT,EAAwB,EAAxBA,UACnBvK,EAAUC,cACVhC,EAAUC,eAFiC,EAGvBlF,mBAAiB,IAHM,mBAGxCmF,EAHwC,KAGlCC,EAHkC,OAIvBpF,oBAAkB,GAJK,mBAIxCqF,EAJwC,KAIlCC,EAJkC,OAKnBtF,mBAAkB,IALC,mBAKxCyR,EALwC,KAKhCQ,EALgC,KAoC/C,OA7BAhP,qBAAU,WACRiE,YAAU,UAAU,SAACC,GACnB8K,EAAU9K,QAEX,CAACoK,IAEJtO,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIM,EAAU,CACZC,SAAUP,EAAQlG,KAAO,kBACzB0G,OAAQ,CACN,CACEC,OAAQ,CACN3G,KAAMwS,EAAUxS,MAElB4G,OAAQ,CACN,CACE5G,KAAM,OACNL,MAAO6S,EAAUC,OAAS,MAAQ,KAClC5L,QAAQ,OAMlBR,EAAQU,KAAKC,UAAUR,OAExB,CAACgM,EAAWtM,IAGb,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,2BAAIsM,EAAUC,OAAS,IAAM,MAG/B,kBAAC,GAAD,KACE,2BAAID,EAAUxS,OAGhB,kBAAC,GAAD,UACesD,IAAZ4C,GACC,kBAAC9G,EAAA,EAAD,CACEiI,MAAO,CACL5I,gBAAiB,WAEnBY,KAAI,eAAUmT,EAAUxS,MACxB5C,KAAMkK,KACN9J,QAAS,kBAAM+J,aAAiBrB,EAASE,OAG3CE,GACA,kBAAClH,EAAA,EAAD,CACEC,KAAI,eAAUmT,EAAUxS,MACxB5C,KAAMoK,IACNhK,QAAS,kBAAM+I,GAAQ,MAG3B,kBAAC,GAAD,KACGiM,EAAUE,OAAOjR,OAAS,GACzB+Q,EAAUE,OAAOrS,KAAI,SAACyQ,EAAOlR,GAAmB,IAAD,EACvCgJ,EACJ,+BACA8J,EAAO7J,QAAO,SAACsK,GAAD,OAASA,EAAInT,OAAS8Q,KAAO,UAD3C,aACA,EAA+C/H,IACjD,OACE,kBAACqK,GAAD,CAAW5S,IAAKZ,EAAOpC,QAAS,kBAAMyK,EAAQ5D,KAAKuE,KAChDkI,SAKRxK,GAAQ,kBAACmB,GAAA,EAAD,CAAWC,KAAM8K,EAAWhU,KAAM,aASjDsB,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAQ/BiJ,GAAOvJ,IAAOO,IAAV,MAWY,qBAAGL,MAAkBc,KAAKD,mBAG1C2C,GAAO1D,IAAOO,IAAV,MAiBY,qBAAGL,MAAkBc,KAAKD,mBAG1CyI,GAAcxJ,IAAOO,IAAV,MAUXmV,GAAY1V,IAAOiK,KAAV,MAEO,qBAAG/J,MAAkBc,KAAKkJ,uBAarC,qBAAGhK,MAAkBc,KAAKD,mB,qjBChKrC,IA6Ce4U,GA7CW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,UAAW9T,EAAqB,EAArBA,OA+BtC,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACO,EAAA,EAAD,CACEJ,MAAO2T,EAAUtT,KACjBC,MAAM,OACNC,SAAU,SAACF,GAAD,OAAUR,EAAO,2BAAK8T,GAAN,IAAiBtT,KAAMA,WAUrDF,GAAgBpC,IAAOO,IAAV,MAMboD,GAAO3D,IAAOO,IAAV,MACC,qBAAGL,MAAkBc,KAAKV,SAYnBN,IAAOO,IAAV,M,2pBCnCf,IAiJesV,GAjJM,SAAC,GAAgD,IAAD,IAA7CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAmB,EACvC1S,mBAAkByS,GADqB,mBAC5DE,EAD4D,KAClDC,EADkD,OAGnC5S,mBAAkBuS,GAHiB,mBAG5DM,EAH4D,KAGjDC,EAHiD,OAKvB9S,oBAAkB,GALK,mBAK5D+S,EAL4D,KAK1CC,EAL0C,OAMrChT,oBAAkB,GANmB,mBAM5DiT,EAN4D,KAMjDC,EANiD,OAOrClT,mBAAiB,IAPoB,mBAO5DrC,EAP4D,KAOnDwV,EAPmD,OAQvBnT,oBAAkB,GARK,mBAQ5DoT,EAR4D,KAQ5CC,EAR4C,OAS/BrT,oBAAkB,GATa,mBAS5D2L,EAT4D,KAShD2H,EATgD,KAU/DtM,EAAUC,cAOdhE,qBAAU,WACJ4P,IAAcN,GAChBc,GAAkB,KAEnB,CAACR,EAAWN,IAEf,IAAMgB,EAAe,SAACV,EAAoBW,GACpC7H,EACF8H,YAAmBjB,EAAWK,GAAW,SAACa,GACpCA,EAAS,GACXL,GAAkB,GAClBF,EAAWK,GACXN,GAAS,KAETC,EAAW,yBACXD,GAAS,IAEXS,YAAW,WACTT,GAAS,KACR,SAGLC,EAAW,wCACXD,GAAS,GACTS,YAAW,WACTT,GAAS,KACR,OAeDU,EAAoB,SAACrB,EAAiBiB,GAC1CV,EAAWP,GACXgB,EAAahB,EAAQiB,IAMjBK,EAAqB,CACzB7O,WAAYA,GACZjB,eAAgBA,GAChBmM,UAAWA,GACXN,cAAeA,GACfO,UAAWA,GACXQ,cAAeA,GACf9F,UAAWA,GACXa,cAAeA,GACf9E,SAAUA,GACV8C,aAAcA,GACdwH,SAAUA,GACVG,aAAcA,GACdtR,gBAAiBA,GACjB1B,oBAAqBA,EACrB2T,cAAeA,GACfV,kBAAmBA,GACnBwC,cAAeA,KACf1B,kBAAmBA,IAGrB,OACE,oCACGW,GACC,kBAAC,EAAD,CACEpV,QAAO,iBAAY4U,EAAOxT,KAAnB,KACP5C,KAAM4X,IACNnW,aAAc,SACdC,cAAe,WACbmW,YAAOxB,EAAWD,EAAOzK,IACzBd,EAAQiN,UAEVnW,UAAW,OACXC,WAAY,WACViV,GAAgB,MAItB,kBAACkB,GAAD,KACE,kBAAC,EAAD,CAAY/X,KAAMgY,IAAa9X,OAAQ,kBAAM2K,EAAQiN,YACrD,kBAAC5W,EAAD,CAAYE,KAAMoV,EAASyB,YACzB,kBAAClX,EAAD,CAAYX,QAAS,kBAAMqW,GAAQ,KAAnC,QACA,kBAACxV,EAAD,CAAab,QAAS,kBAAMqW,GAAQ,KAApC,SAEDD,GAAYS,GAAkB,kBAAC,GAAD,CAAMjX,KAAM4X,MAC1CpB,GACC,oCACE,kBAACjT,EAAA,EAAD,CACEnD,QAAS,kBAAMgX,EAAaV,EAAW,sBACvC1W,KAAMkY,IACNC,UAAW3I,IAEb,kBAACjM,EAAA,EAAD,CACEnD,QAAS,kBAxEG,SAACgY,GACvB,IAAIC,EAAM,eAAQD,UACXC,EAAO1M,GACd2M,YAAgBjC,EAAWgC,GAAQ,SAAC1M,GAClC8L,EAAkB,2BACXrB,GADU,IACFxT,KAAMwT,EAAOxT,KAAO,aACjC,0BAkEqB2V,CAAgB7B,IAC/B1W,KAAMwY,MAER,kBAACjV,EAAA,EAAD,CACEnD,QAAS,kBA/GCqY,EA+GkB/B,EAAU/K,GA9GhDkM,YAAOxB,EAAWoC,QAClB5N,EAAQiN,SAFW,IAACW,GAgHVzY,KAAMwD,MAEPhC,GAAWsV,GAAa,kBAAC,GAAD,KAAUtV,KAIxCgV,EACGkC,IAAMC,cAAcjB,EAAMnB,EAAO,aAAjC,mBACGA,EAAKqC,oBAAsBlC,GAD9B,4BAEc,SAACmC,GAAD,OAAkB1B,EAAc0B,MAF9C,wBAGU,SAACtW,GAAD,OAAgBoU,EAAWpU,MAHrC,IAKAmW,IAAMC,cAAcjB,EAAMnB,EAAO,SAAjC,mBACGA,EAAKqC,oBAAsBlC,GAD9B,wBAEU,SAACnU,GAAD,OACNkV,EAAkBlV,EAAO,wBAH7B,MAWJwV,GAASzX,IAAOO,IAAV,MACD,qBAAGL,MAAkBc,KAAKV,SAc/BkB,GAAUxB,IAAOO,IAAV,MASPR,GAAOC,YAAOC,IAAPD,CAAH,MAMC,qBAAGE,MAAkBC,KAAKC,a,wsCCvNrC,IAiBeoY,GAjBG,SAAC,GAA4C,IAA1C7W,EAAyC,EAAzCA,KAAM8W,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,SACrC,OACE,kBAACC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kDAEF,kBAAC,GAAD,KACE,kBAAC,GAAD,eACChX,GAEH,kBAACD,EAAA,EAAD,CAAYC,KAAM8W,EAAY3Y,QAAS,kBAAM4Y,KAAYhZ,KAAMkZ,SAQjED,GAAO3Y,IAAOO,IAAV,MAEC,qBAAGL,MAAkBc,KAAKV,SACf,qBAAGJ,MAAkBc,KAAKD,mBAGhC,qBAAGb,MAAkBc,KAAK6X,aAUpCnV,GAAO1D,IAAOO,IAAV,MAOC,qBAAGL,MAAkBc,KAAK8X,eAK/BtP,GAAcxJ,IAAOO,IAAV,MASXkJ,GAAYzJ,IAAOiK,KAAV,MAEJ,qBAAG/J,MAAkBc,KAAKkJ,uBAK/BR,GAAO1J,IAAOO,IAAV,MAQY,qBAAGL,MAAkBc,KAAKD,mB,SCgCjCgY,UA/FE,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MACdzO,EAAUC,cAD8C,EAExBjH,mBAAiB,IAFO,mBAErD0V,EAFqD,KAEzCC,EAFyC,OAGhC3V,qBAHgC,mBAGrDuS,EAHqD,KAG7CqD,EAH6C,OAI9B5V,oBAAkB,GAJY,mBAIrD6V,EAJqD,KAI5CC,EAJ4C,OAKlC9V,oBAAkB,GALgB,mBAKrD+V,EALqD,KAK9CC,EAL8C,KAO5D/S,qBAAU,iBACOZ,IAAXkQ,GAAwBwD,KAC1BD,GAAW,GACXE,GAAS,GACTL,EAAc,IACdC,OAAUvT,MAGX,CAACoT,IAEJ,IAAMQ,EAAaxN,sBAAW,uCAC5B,WAAO1J,GAAP,eAAA2J,EAAA,yDACMwN,OAAiC7T,OACXA,IAAtBoT,EAAMU,OAAOpX,KAFnB,gCAGsBqX,YAAyBrX,EAAO,IAAK,OAAQ0W,EAAMU,OAAOpX,MAHhF,OAGImX,EAHJ,sBAI0B7T,IAApBoT,EAAMU,OAAOrO,GAJnB,gCAKsBuO,YAActX,EAAO,KAAM0W,EAAMU,OAAOrO,IAL9D,OAKIoO,EALJ,cAMEJ,GAAW,QACOzT,IAAd6T,GACFP,EAAc5W,GACdiX,GAAS,KAETL,EAAc5W,GACd6W,EAAUM,IAZd,4CAD4B,sDAgB5B,CAACT,IAGHxS,qBAAU,WACR,QAAcZ,IAAVoT,QAAkCpT,IAAXkQ,EAAsB,CAC/C,IAAI+D,EAAmBb,EAAMzF,KAC1BrP,MAAM,KACNiH,QAAO,SAAC6N,GAAD,OAAmBA,EAAMhV,SAAS,cAAY,GACrD8V,WAAW,UAAW,SACRlU,IAAbiU,GACFL,EAAWK,MAGd,CAACb,EAAOQ,EAAY1D,IAMvB,IAeoBiE,EAfdC,EAA0B,CAC9BzS,OAAQ,IAAI0S,KAAO,EAAGjB,EAAMU,OAAOpX,MACnC+L,MAAO,IAAI+B,KAAM,EAAG4I,EAAMU,OAAOpX,MACjC8H,KAAM,IAAI8P,KAAK,EAAGlB,EAAMU,OAAOpX,MAC/B6X,aAAc,IAAIC,KAAY,EAAGpB,EAAMU,OAAOpX,OAehD,OACE,oCACG8W,GAAW,kBAACiB,GAAA,EAAD,OACVjB,GAAWE,GACX,kBAAC,GAAD,CACE3X,KAAM,wDACN8W,WAAY,MACZC,SAAU,kBAnBM,WACtB,IAAIe,EAAqBO,EAASf,UAC3BQ,EAAUpO,GACjB2M,YAAgBiB,EAAa,IAAKQ,GAAW,SAACpO,GAC5Cd,EAAQ5D,KAAR,WAAiBsS,EAAjB,sBAAyC5N,OAerBiP,MAGlBhB,GAAUF,QAAsBxT,IAAXkQ,EAQrB,qCAPA,kBAAC,GAAD,CACEA,OAAQA,EACRC,UAAWkD,EAAa,IACxBjD,MAAuB,KAAhBF,EAAOxT,KACd2T,MAnBY8D,EAmBKd,EAlBhBc,EAAIQ,OAAO,GAAGC,cAAgBT,EAAIU,MAAM,S,4iCCgJpC9V,IA1NM,SAAC,GAAsB,IAApBhD,EAAmB,EAAnBA,KAClB6G,EAAUC,cAD2B,EAEjBlF,mBAAiB,IAFA,mBAElCmF,EAFkC,KAE5BC,EAF4B,OAGDpF,qBAHC,mBAGlCmX,EAHkC,KAGpBC,EAHoB,KAIrCpQ,EAAUC,cAEdhE,qBAAU,WACR,QAAgBZ,IAAZ4C,EAAuB,CACzB,IAAIoS,EAAUxR,YAAkBzH,GAC5BiZ,EAAQ7W,QAAU,MACpB6W,EAAUA,EAAQC,UAAU,EAAG,MAAQ,OAEzC,IAAI/R,EAAU,CACZC,SAAUP,EAAQlG,KAAO,aACzBwY,QAASF,GAEXjS,EAAQU,KAAKC,UAAUR,OAExB,CAACnH,EAAM6G,IAEV,IAAMuS,EAAM,SAAChB,EAAaiB,EAAkBC,GAC1C,OAAOlB,EAAImB,OAAO,EAAGF,GAAYjB,EAAImB,OAAOD,EAAS,IAGjDE,EAAcnP,uBAClB,SAACoP,GACC,GAAKA,EAAQpX,SAAS,KAwBf,CAAC,IAAD,EAC2BqX,YAAYD,GAApCnE,EADH,EACGA,OAAQtV,EADX,EACWA,KAAM2Z,EADjB,EACiBA,WACP1V,IAAXqR,QAAoCrR,IAAZ4C,GAC1B+S,YAAY/S,EAASyO,EAAS,IAAMtV,EAAO,MAAQyZ,EAAU,IAAME,EAAQ,UA3BnD,CAC1B,IAAIE,EAAa,MAAQJ,EACrBnZ,EAAQwZ,SAASL,EAAQtB,WAAW,IAAK,KAFnB,EAGMuB,YAAYG,GAApCvE,EAHkB,EAGlBA,OAAQtV,EAHU,EAGVA,KAEZ+Z,GAAO,EACPzE,EAAShV,IAAU,KAAIyZ,GAAO,GAClC,IAAIC,GAAO,EACP1E,EAAShV,IAAU,IAAG0Z,GAAO,GAEjC,IAAIC,EAAa,MAVS,EAGJN,MAOWF,OAClBxV,IAAXqR,QAAoCrR,IAAZ4C,GAC1B+S,YACE/S,EACAyO,EACE,IACAtV,GACCga,EAAO,gBAAkB,KACzBD,EAAO,kBAAoB,IAC5B,MACAE,EACA,SAUV,CAACpT,IAGGqT,EAAa7P,uBACjB,SAACrK,EAAcO,GACb,QAAa0D,IAATjE,EAAoB,CACtB,GAAIA,EAAKqC,SAAS,OAASrC,EAAKqC,SAAS,MAAO,CAC9C,IAAM8X,EAAQna,EAAKuC,MAAM,MACrB6X,EAAwB,GAmD5B,OAlDAD,EAAMpV,SAAQ,SAACsV,EAAc9Z,GAC3B,GAAI8Z,EAAKhY,SAAS,MAAO,CACvB,IAAMiY,EAAqBD,EAAK9X,MAAM,MAChCgY,EAAsBD,EAAS,GAAG/X,MAAM,KAC1CiY,EAAaD,EAAU,GAC3B,GAAmB,SAAfC,EACFJ,EAAepV,KACb,kBAACyV,EAAD,CAAUtZ,IAAK,WAAaZ,GAC1B,kBAACma,EAAD,CAAavc,QAAS,kBAAMqb,EAAYe,EAAU,MAChD,kBAAC,IAAD,CAAW3W,KAAM2W,EAAU,GAAI5Z,KAAM4Z,EAAU,KADjD,IACyDA,EAAU,IAEnE,kBAACE,EAAD,KAAWH,EAAS,WAKxB,GADmB,UAAfE,GAAyC,aAAfA,IAA2BA,GAAc,KACnED,EAAU,GAAGlY,SAAS,KAAM,CAC9B,IAAMsY,EAAcJ,EAAU,GAAGhY,MAAM,KACjCgH,EACJ,IACAiR,EACA,gBACAG,EAAY,GACZ,WACAA,EAAY,GACdP,EAAepV,KACb,kBAACyV,EAAD,CAAUtZ,IAAK,WAAaZ,GAC1B,kBAACqa,EAAD,CAAMzc,QAAS,kBAAMyK,EAAQ5D,KAAKuE,KAChC,kBAAC,IAAD,CAAW3F,KAAM2W,EAAU,GAAI5Z,KAAMga,EAAY,KADnD,IAC2DA,EAAY,GADvE,KAEGA,EAAY,GAFf,KAIA,kBAACF,EAAD,KAAWH,EAAS,UAGnB,CACL,IAAM/Q,EAAe,IAAMiR,EAAa,gBAAkBD,EAAU,GACpEH,EAAepV,KACb,kBAACyV,EAAD,CAAUtZ,IAAK,WAAaZ,GAC1B,kBAACqa,EAAD,CAAMzc,QAAS,kBAAMyK,EAAQ5D,KAAKuE,KAChC,kBAAC,IAAD,CAAW3F,KAAM2W,EAAU,GAAI5Z,KAAM4Z,EAAU,KADjD,IACyDA,EAAU,IAEnE,kBAACE,EAAD,KAAWH,EAAS,WAMf,KAATD,GAAaD,EAAepV,KAAK,kBAACyV,EAAD,CAAUtZ,IAAKZ,GAAQ8Z,OAGzD,oCAAGD,GACL,GAAIpa,EAAKoC,OAAS,EACvB,OAAO,kBAACqY,EAAD,CAAUtZ,IAAK,WAAaZ,GAAQP,GAG/C,OAAO,uCAET,CAAC4I,IAGGiS,EAAcxQ,uBAClB,SAACyQ,GACC,GAAIA,EAASzY,SAAS,kBAAmB,CACvC,IAAI0Y,EAA0B,GACxBvQ,EAAkBxK,EAAKuC,MAAM,kBA4CnC,OA1CAiI,EAAMzF,SAAQ,SAAC+V,EAAkBva,GAC/B,GAAIua,EAASzY,SAAS,gBAAiB,CACrC,IAAM2Y,EAAWF,EAASvY,MAAM,gBAC1B0Y,EAAsBD,EAAS,GAAGzY,MAAM,MAC1C2Y,GAAS,EACbH,EAAS/V,KACP,2BAAO7D,IAAK,QAAUZ,GACpB,2BAAOY,IAAK,QAAUZ,GACnB0a,EAAUja,KAAI,SAACC,EAAaV,GAC3B,GAAIU,EAAIoB,SAAS,KAAM,CACrB,GAAI6Y,EAAQ,CACVA,GAAS,EACT,IAAM7Z,EAAQJ,EAAIsB,MAAM,KACxB,OACE,wBAAIpB,IAAKZ,GACNc,EAAML,KAAI,SAACkC,EAAc3C,GACxB,OAAO,kBAAC0C,EAAD,CAAe9B,IAAKZ,GAAQ2C,OAKzC,IAAM7B,EAAQJ,EAAIsB,MAAM,KACxB,OACE,wBAAIpB,IAAKZ,GACNc,EAAML,KAAI,SAACkC,EAAc3C,GACxB,OAAO,kBAAC4C,EAAD,CAAWhC,IAAKZ,GAAQ2Z,EAAWhX,EAAM3C,QAMxD,OAAO,2CAMjBwa,EAAS/V,KAAKkV,EAAWc,EAAS,GAAIza,SAEtCwa,EAAS/V,KAAKkV,EAAW1P,EAAM,GAAIjK,OAGhCwa,EAET,MAAO,CAACb,EAAWY,EAAU,MAE/B,CAAC9a,EAAMka,IAGHiB,EAAa9Q,uBACjB,SAACyQ,GACC,KAAOA,EAASzY,SAAS,OAAO,CAC9B,IAAMgX,EAAWyB,EAASM,QAAQ,MAC5B9B,EAASwB,EAASM,QAAQ,MAAQ,EACxCN,EAAW1B,EAAI0B,EAAUzB,EAAUC,GAErC,OAAOuB,EAAYC,KAErB,CAACD,IAUH,OAPAhW,qBAAU,WACR,QAAaZ,IAATjE,EAAoB,CACtB,IAAI+Y,EAAeoC,EAAWnb,GAC9BgZ,EAAgBD,MAEjB,CAAC/Y,EAAM4I,EAASuS,IAGjB,kBAACE,EAAD,UACepX,IAAZ4C,GAAkC,KAAT7G,GACxB,kBAAC,IAAD,CACEgI,MAAO,CACL5I,gBAAiB,UACjBkc,MAAO,QACPC,QAAS,OAEXxd,KAAMkK,IACN9J,QAAS,kBAAM+J,YAAiBrB,EAASE,MAG5CgS,IAOP,IAAMsC,EAAwBhd,IAAOO,IAAV,KAIrBgc,EAAOvc,IAAOiK,KAAV,KAEY,qBAAG/J,MAAkBc,KAAKkJ,uBAGrC,qBAAGhK,MAAkBc,KAAKD,mBAQ/Bsb,EAAcrc,YAAOuc,EAAPvc,CAAH,KAKXoc,EAAWpc,IAAOiK,KAAV,KAIRrF,EAAgB5E,IAAO+E,GAAV,KACG,qBAAG7E,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,SAKhCwE,EAAY9E,IAAOiF,GAAV,KACO,qBAAG/E,MAAkB8E,MAAMjE,mBACtC,qBAAGb,MAAkB8E,MAAM1E,U,wGC3Q1B6T,E,kBAAAA,K,WAAAA,E,UAAAA,E,YAAAA,E,WAAAA,E,eAAAA,M,SAQSgJ,EAUnB,WACE9R,EACA/I,EACA2R,EACAL,EACAC,EACAC,EACAE,EACAD,GACC,yBAlBH1I,QAkBE,OAjBF/I,UAiBE,OAhBF2R,aAgBE,OAfFL,SAeE,OAdFC,WAcE,OAbFC,SAaE,OAZFE,kBAYE,OAXFD,eAWE,EACAqJ,KAAK/R,GAAKA,EACV+R,KAAK9a,KAAOA,GAAQ,GACpB8a,KAAKnJ,QAAUA,GAAW,GAC1BmJ,KAAKxJ,IAAMA,GAAOO,EAASC,MAC3BgJ,KAAKvJ,MAAQA,GAAS,EACtBuJ,KAAKtJ,IAAMA,GAAO,GAClBsJ,KAAKpJ,aAAeA,GAAgB,EACpCoJ,KAAKrJ,UAAYA,GAAa,GA3BboJ,EA8BZE,QAAU,SAACjK,GAChB,MAAO,CAACA,EAAM/H,GAAI+H,EAAM9Q,Q,8ECvCP8X,EAOnB,WACE/O,EACA/I,EACAgb,EACA7a,EACAN,GACC,yBAZHkJ,QAYE,OAXF/I,UAWE,OAVFG,YAUE,OATFN,UASE,OARFmb,cAQE,EACAF,KAAK/R,GAAKA,EACV+R,KAAKE,SAAWA,GAAY,GAC5BF,KAAK9a,KAAOA,GAAQ,GACpB8a,KAAK3a,OAASA,GAAU,GACxB2a,KAAKjb,KAAOA,GAAQ","file":"static/js/11.b9558cb3.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  transform?: string | Transform;\n  action: () => void;\n}\n\nconst BackButton = ({ icon, transform, action }: $Props) => {\n  return (\n    <Back onClick={action}>\n      <Icon icon={icon} transform={transform} />\n    </Back>\n  );\n};\n\nexport default BackButton;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n  &:hover {\n    color: ${({ theme }) => theme.buttons.color};\n  }\n`;\n\nconst Back = styled.div`\n  float: left;\n  font-size: calc(${({ theme }) => theme.buttons.height} + 10px);\n  margin: 10px 0px 0px 10px;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const ToggleLeft = styled.div`\n  width: auto;\n  padding: 10px;\n  margin: 5px 0px 5px 5px;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: left;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  border-radius: 5px 0px 0px 5px;\n\n  transition: color 0.2s, background-color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n`;\n\nexport const ToggleRight = styled(ToggleLeft)`\n  margin: 5px 5px 5px 0px;\n\n  border-radius: 0px 5px 5px 0px;\n`;\n\ntype EditMode = {\n  mode: string;\n};\n\nexport const EditToggle = styled.div<EditMode>`\n  width: auto;\n  height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  color: ${({ theme }) => theme.buttons.color};\n\n  ${ToggleLeft} {\n    background-color: ${(props) => {\n      if (props.mode !== \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n\n  ${ToggleRight} {\n    background-color: ${(props) => {\n      if (props.mode === \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  message: string;\n  icon?: IconDefinition;\n  confirmeText: string;\n  confirmeClick: () => void;\n  abortText: string;\n  abortClick: () => void;\n}\n\nconst Dialog = ({\n  message,\n  icon,\n  confirmeText,\n  confirmeClick,\n  abortText,\n  abortClick,\n}: $Props) => {\n  return (\n    <DialogWrapper>\n      <Message>\n        {icon ? <Icon icon={icon} /> : \"\"} {message}\n      </Message>\n      <ButtonBar>\n        <TextButton text={abortText} onClick={abortClick} />\n        <TextButton text={confirmeText} onClick={confirmeClick} />\n      </ButtonBar>\n    </DialogWrapper>\n  );\n};\n\nexport default Dialog;\n\nconst DialogWrapper = styled.div`\n  width: 180px;\n  position: absolute;\n  z-index: 1010;\n  top: 10px;\n  left: calc(50% - 100px);\n  padding: 10px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${({ theme }) => theme.tile.color};\n`;\n\nconst Message = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nconst ButtonBar = styled.div`\n  width: 100%;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport RandomTable from \"../../../../data/RandomTable\";\n\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport StringField from \"../../../form_elements/StringField\";\n\ninterface $Props {\n  randomTable: RandomTable;\n  onEdit: (value: RandomTable) => void;\n}\n\nconst RandomTableEditView = ({ randomTable, onEdit }: $Props) => {\n  const onRowChange = (field: string, value: string, index: number) => {\n    let rows = randomTable.rows;\n    rows[index] = { ...rows[index], [field]: value };\n    onEdit({ ...randomTable, rows: rows });\n  };\n\n  const addNewRow = () => {\n    onEdit({\n      ...randomTable,\n      rows: [...randomTable.rows, { value: \"\", cells: \"\" }],\n    });\n  };\n\n  const removeRow = (index: number) => {\n    let rows = randomTable.rows;\n    if (index !== -1) {\n      rows.splice(index, 1);\n      onEdit({ ...randomTable, rows: rows });\n    }\n  };\n\n  return (\n    <CenterWrapper>\n      <RandomTableView>\n        <StringField\n          value={randomTable.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...randomTable, name: name })}\n        />\n        <StringField\n          value={randomTable.header}\n          label=\"Header\"\n          onChange={(name) => onEdit({ ...randomTable, header: name })}\n          placeholder={\"Items| Description|...\"}\n        />\n      </RandomTableView>\n      <RandomTableView>\n        {randomTable.rows.map(\n          (row: { value: string; cells: string }, index: number) => {\n            return (\n              <RowWrapper key={index}>\n                <RowCount>{index}</RowCount>\n                <StringField\n                  value={row.value}\n                  label={\"Row values \" + index}\n                  onChange={(text) => onRowChange(\"value\", text, index)}\n                  placeholder={`${index + 1} or 0-5`}\n                />\n                <StringField\n                  value={row.cells}\n                  label={\"Row \" + index}\n                  onChange={(text) => onRowChange(\"cells\", text, index)}\n                  placeholder={`Item ${index}| Description ${index}|...`}\n                />\n                <IconButton icon={faTrash} onClick={() => removeRow(index)} />\n              </RowWrapper>\n            );\n          }\n        )}\n        <RowWrapper>\n          <IconButton icon={faPlus} onClick={() => addNewRow()} />\n        </RowWrapper>\n      </RandomTableView>\n    </CenterWrapper>\n  );\n};\n\nexport default RandomTableEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst RandomTableView = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  flex: 1 1 600px;\n  padding: 5px;\n  margin: 5px;\n  height: 100%;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst RowWrapper = styled.div`\n  flex: 1 1 600px;\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst RowCount = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 38px;\n  flex: 1 1 20px;\n  max-width: 20px;\n  text-algin: center;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport RandomTable from \"../../../../data/RandomTable\";\n\nimport { faArrowRight, faDice } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\n\ninterface $Props {\n  randomTable: RandomTable;\n}\n\nconst RandomTableView = ({ randomTable }: $Props) => {\n  const [rand, setRand] = useState<number>(-1);\n\n  const rollForRandom = () => {\n    const min = 1;\n    let max = 10;\n    const lastRowValues = randomTable.rows[randomTable.rows.length - 1].value;\n    if (lastRowValues.includes(\"-\")) {\n      let range = lastRowValues.trim().split(\"-\");\n      max = +range[1];\n    } else if (lastRowValues.includes(\"–\")) {\n      let range = lastRowValues.trim().split(\"–\");\n      max = +range[1];\n    } else {\n      max = +lastRowValues;\n    }\n    const rand = Math.round(min + Math.random() * (max - min));\n    setRand(rand);\n  };\n\n  return (\n    <CenterWrapper>\n      <Name>\n        <b>{randomTable.name}</b>\n      </Name>\n      <View>\n        <TextButton\n          text={\"Roll\"}\n          icon={faDice}\n          onClick={() => rollForRandom()}\n        />\n        {rand >= 0 && (\n          <Prop>\n            {rand} <Icon icon={faArrowRight} />\n            {randomTable.rows.map((row: { value: string; cells: string }) => {\n              if (row.value.includes(\"-\")) { // normal -\n                let range = row.value.trim().split(\"-\");\n                const min: number = +range[0];\n                const max: number = +range[1];\n                if (min <= rand && rand <= max)\n                  return <FormatedText text={row.cells} />;\n              } else if (row.value.includes(\"–\")) { // – used by DnDBeyond \n                let range = row.value.trim().split(\"–\");\n                const min: number = +range[0];\n                const max: number = +range[1];\n                if (min <= rand && rand <= max)\n                  return <FormatedText text={row.cells} />;\n              } else {\n                const valueNumber = +row.value;\n                if (valueNumber === rand)\n                  return <FormatedText text={row.cells} />;\n              }\n              return <></>;\n            })}\n          </Prop>\n        )}\n      </View>\n      <View>\n        <table>\n          <tbody>\n            <tr>\n              <TableHeadProp>Number</TableHeadProp>\n              {randomTable.header &&\n                randomTable.header\n                  .split(\"|\")\n                  .map((cell: string, index: number) => {\n                    return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                  })}\n            </tr>\n            {randomTable.rows &&\n              randomTable.rows.map(\n                (row: { value: string; cells: string }, index: number) => {\n                  return (\n                    <tr key={index}>\n                      <TableProp key={index}>{row.value}</TableProp>\n                      {row.cells\n                        .split(\"|\")\n                        .map((cell: string, index: number) => {\n                          return (\n                            <TableProp key={index}>\n                              <FormatedText text={cell} />\n                            </TableProp>\n                          );\n                        })}\n                    </tr>\n                  );\n                }\n              )}\n          </tbody>\n        </table>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default RandomTableView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  flex: 1 1 600px;\n  padding: 5px;\n  margin: 5px;\n  height: 100%;\n  max-width: calc(100% - 20px);\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: ${({ theme }) => theme.tile.color};\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: left;\n`;\n\nconst Prop = styled.div`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  box-sizing: content-box;\n  text-align: center;\n\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};s\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: number;\n  label: string;\n  max?: number;\n  step?: number;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: number) => void;\n}\n\nconst NumberField = ({ value, max, step, label, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      {max && (\n        <Input\n          type=\"number\"\n          max={max}\n          step={step ? step : 1}\n          value={value}\n          onChange={(e) => onChange(+e.target.value)}\n        />\n      )}\n      {!max && (\n        <Input\n          type=\"number\"\n          step={step ? step : 1}\n          value={value}\n          onChange={(e) => onChange(+e.target.value)}\n        />\n      )}\n    </Field>\n  );\n};\n\nexport default NumberField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n`;\n\nconst Input = styled.input`\n  flex: 1 1 auto;\n  max-width: 6em;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  height?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst TextField = ({ value, label, height, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input height={height} value={value} onChange={(e) => onChange(e.target.value)}></Input>\n    </Field>\n  );\n};\n\nexport default TextField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 3 3 auto;\n  padding: 5px;\n  margin: 5px;\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n  min-width: 100%;\n  height: 30px;\n  line-height: 30px;\n`;\n\ntype TextProps = {\n  height?: string;\n};\n\nconst Input = styled.textarea<TextProps>`\n  flex: 1 1;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  height: ${({ height }) => (height !== undefined ? height : \"auto\")};\n  min-height: ${({ height }) => (height !== undefined ? height : \"22vh\")};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: boolean;\n  label: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: boolean) => void;\n}\n\nconst CheckField = ({ value, label, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input\n        type=\"checkbox\"\n        defaultChecked={value}\n        onChange={(e) => onChange(e.target.checked)}\n      ></Input>\n      <Checkmark></Checkmark>\n    </Field>\n  );\n};\n\nexport default CheckField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 38px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  user-select: none;\n  position: relative;\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n`;\n\nconst Checkmark = styled.div`\n  flex: 1 1;\n  height: 30px;\n  min-width: 30px;\n  max-width: 30px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n\n  &:after {\n    content: \"\";\n    display: none;\n  }\n\n  &:after {\n    width: 5px;\n    height: 10px;\n    border: solid white;\n    border-width: 0 3px 3px 0;\n    -webkit-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    transform: rotate(45deg);\n    margin-left: 6px;\n    margin-top: 2px;\n  }\n`;\n\nconst Input = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n  left: 0;\n  bottom 0;\n\n  &:checked ~ ${Checkmark} {\n    background-color: ${({ theme }) => theme.main.highlight};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  &:checked ~ ${Checkmark}:after {\n    display: block;\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\nimport Select from \"react-select\";\nimport { useEffect } from \"react\";\n\ninterface $Props {\n  value: string;\n  options: string[];\n  label: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n  onClear: () => void;\n}\n\nconst SelectField = ({ value, options, label, icon, transform, onChange, onClear }: $Props) => {\n  const [opts, setOptions] = useState<{ value: string; label: string }[]>([]);\n  const handleChange = (option: { value: string; label: string } | null) => {\n    if (option !== null && option !== undefined) {\n      onChange(option.value);\n    } else {\n      onClear();\n    }\n  };\n\n  useEffect(() => {\n    let newOptions: { value: string; label: string }[] = [];\n    options.forEach((option: string) => newOptions.push({ value: option, label: option }));\n    setOptions(newOptions);\n  }, [options]);\n\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      {opts.length > 0 && (\n        <StyledSelect\n          isMulti={false}\n          isClearable={true}\n          defaultValue={{ value: value, label: value }}\n          classNamePrefix=\"react-select\"\n          options={opts}\n          onChange={(options: { value: string; label: string }) => handleChange(options)}\n          onC\n        />\n      )}\n    </Field>\n  );\n};\n\nexport default SelectField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst StyledSelect = styled(Select)`\n  flex: 3 2 auto;\n  box-sizing: border-box;\n  border: none;\n  min-width: 120px;\n\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n\n  .react-select__single-value {\n    color: ${({ theme }) => theme.input.color};\n  }\n  .react-select__control {\n    background-color: ${({ theme }) => theme.input.backgroundColor};\n    border: none;\n    border-radius: 5px;\n  }\n  .react-select__menu {\n    background-color: ${({ theme }) => theme.input.backgroundColor};\n\n    .react-select__option:hover {\n      background-color: ${({ theme }) => theme.buttons.backgroundColor};\n      color: ${({ theme }) => theme.buttons.color};\n    }\n    .react-select__option--is-focused {\n      background-color: ${({ theme }) => theme.buttons.backgroundColor};\n      color: ${({ theme }) => theme.buttons.color};\n    }\n  }\n`;\n","export const makeEnumSelectable = (e: any) => {\n  let options: string[] = [];\n  for (const value in e) {\n    if (isNaN(Number(value))) {\n      options.push(value);\n    }\n  }\n  return options;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Talent, { TalentCategory, TalentType } from \"../../../../data/Talent\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport TextField from \"../../../form_elements/TextField\";\nimport CheckField from \"../../../form_elements/CheckField\";\n\nimport { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport SelectField from \"../../../form_elements/SelectField\";\nimport { makeEnumSelectable } from \"../../../../services/EnumService\";\n\ninterface $Props {\n  talent: Talent;\n  onEdit: (value: Talent) => void;\n}\n\nconst TalentEditView = ({ talent, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <FieldGroup>\n          <StringField\n            value={talent.name}\n            label=\"Name\"\n            onChange={(name) => onEdit({ ...talent, name: name })}\n          />\n          <CheckField\n            value={!!talent.isFlaw}\n            label=\"Is Flaw?\"\n            onChange={(isFlaw) => onEdit({ ...talent, isFlaw: isFlaw })}\n          />\n        </FieldGroup>\n        <NumberField\n          value={talent.cost}\n          label=\"Cost\"\n          onChange={(cost) => onEdit({ ...talent, cost: cost })}\n        />\n        <SelectField\n          value={talent.type}\n          options={makeEnumSelectable(TalentType)}\n          label={\"Type\"}\n          onClear={() => onEdit({ ...talent, type: TalentType.passiv })}\n          onChange={(type: string) => onEdit({ ...talent, type: type })}\n        />\n        <SelectField\n          value={talent.category}\n          options={[\n            TalentCategory.magical,\n            TalentCategory.mental,\n            TalentCategory.physical,\n            TalentCategory.social,\n          ]}\n          label={\"Category\"}\n          onClear={() => onEdit({ ...talent, category: \"\" })}\n          onChange={(category: string) =>\n            onEdit({ ...talent, category: category })\n          }\n        />\n        <TextField\n          value={talent.prerequisite}\n          label=\"Prerequisite\"\n          icon={faBookOpen}\n          onChange={(prerequisite) =>\n            onEdit({ ...talent, prerequisite: prerequisite })\n          }\n        />\n        <TextField\n          value={talent.effect}\n          label=\"Effect\"\n          icon={faBookOpen}\n          onChange={(effect) => onEdit({ ...talent, effect: effect })}\n        />\n        {talent.isFlaw && talent.type && (\n          <StringField\n            value={talent.triggerFrequency}\n            label=\"Trigger Frequency\"\n            onChange={(triggerFrequency) =>\n              onEdit({ ...talent, triggerFrequency: triggerFrequency })\n            }\n          />\n        )}\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default TalentEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst FieldGroup = styled.div`\n  flex: 2 1 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport Talent from \"../../../../data/Talent\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport {\n  formatDiscordText,\n  sendEmbedMessage,\n} from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\n\ninterface $Props {\n  talent: Talent;\n}\n\nconst TalentView = ({ talent }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            author: {\n              name: talent.name,\n            },\n            fields: [\n              {\n                name: \"Cost\",\n                value: talent.cost ? talent.cost : \"-\",\n                inline: true,\n              },\n              {\n                name: \"Prerequisite\",\n                value: formatDiscordText(talent.prerequisite),\n              },\n              {\n                name: \"Effect\",\n                value: formatDiscordText(talent.effect),\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [talent, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Cost>\n          <b>{talent.cost}</b>\n        </Cost>\n\n        <Name>\n          <b>{talent.name}</b>\n        </Name>\n\n        <PropWrapper>\n          <Prop>\n            <PropTitle>Category: </PropTitle>\n            {talent.category}\n          </Prop>\n          <Prop>\n            <PropTitle>Type: </PropTitle>\n            {talent.type ? (talent.isFlaw ? \"trigger\" : \"active\") : \"Passive\"}\n          </Prop>\n        </PropWrapper>\n        <Text>\n          <PropTitle>Prerequisite: </PropTitle>\n          <FormatedText text={talent.prerequisite} />\n        </Text>\n        <Text>\n          <PropTitle>Type: </PropTitle>\n          <FormatedText text={talent.type} />\n        </Text>\n        <Text>\n          <PropTitle>Effect: </PropTitle>\n          <FormatedText text={talent.effect} />\n        </Text>\n        {talent.isFlaw && talent.type && (\n          <PropWrapper>\n            <PropTitle>Trigger Frequency: </PropTitle>\n            <Prop>{talent.triggerFrequency}</Prop>\n          </PropWrapper>\n        )}\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${talent.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${talent.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={talent} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default TalentView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Cost = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport Race from \"../../../../data/Race\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport { sendEmbedMessage } from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport { useHistory } from \"react-router\";\nimport Talent from \"../../../../data/Talent\";\nimport { reciveAll } from \"../../../../services/DatabaseService\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\n\ninterface $Props {\n  race: Race;\n}\n\nconst RaceView = ({ race }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n  const [talents, setTalents] = useState<Talent[]>([]);\n  let history = useHistory();\n\n  useEffect(() => {\n    reciveAll(\"talents\", (results: any[]) => {\n      setTalents(results);\n    });\n  }, [race]);\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            author: {\n              name: race.name,\n            },\n            fields: [\n              {\n                name: \"Hp\",\n                value: race.hp ? race.hp : \"-\",\n                inline: true,\n              },\n              {\n                name: \"Ability Modifier\",\n                value: race.abilityModifier ? race.abilityModifier : \"-\",\n                inline: true,\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [race, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Name>\n          <b>{race.name}</b>\n        </Name>\n\n        <PropWrapper>\n          <Prop>\n            <PropTitle>Hp: </PropTitle>\n            {race.hp}\n          </Prop>\n          <Prop>\n            <PropTitle>Stamina: </PropTitle>\n            {race.stamina}\n          </Prop>\n          <Prop>\n            <PropTitle>Size: </PropTitle>\n            {race.size}\n          </Prop>\n          <Prop>\n            <PropTitle>Sprint: </PropTitle>\n            {race.sprint}\n          </Prop>\n          <Prop>\n            <PropTitle>Ability Modifier: </PropTitle>\n            {race.abilityModifier}\n          </Prop>\n          <Prop>\n            <PropTitle>Limits: </PropTitle>\n            {race.limit}\n          </Prop>\n        <Text>\n          <PropTitle>Stress: </PropTitle>\n          <FormatedText text={race.description} />\n        </Text>\n        </PropWrapper>\n\n        <PropWrapper>\n          {race.talents.length > 0 &&\n            race.talents.map((talent, index: number) => {\n              const link: string =\n                \"/talent-detail/id/\" +\n                talents.filter((tal) => tal.name === talent)[0]?.id;\n              return (\n                <TalentLink key={index} onClick={() => history.push(link)}>\n                  {talent}\n                </TalentLink>\n              );\n            })}\n        </PropWrapper>\n        <PropWrapper>\n          {race.flaws.length > 0 &&\n            race.flaws.map((flaw, index: number) => (\n              <Prop key={index}>{flaw}</Prop>\n            ))}\n        </PropWrapper>\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${race.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${race.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={race} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default RaceView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: white;\n  text-align: center;\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst TalentLink = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  margin: 5px;\n  padding: 5px;\n  cursor: pointer;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../data/IEntity\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\nimport { reciveAllFiltered, reciveAllFilteredPromise } from \"../../services/DatabaseService\";\nimport Filter from \"../../data/Filter\";\n\ninterface $Props {\n  optionTable: string | string[];\n  filters?: Filter[];\n  value: string;\n  label: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst AutoStringField = ({\n  optionTable,\n  filters,\n  value,\n  label,\n  icon,\n  transform,\n  onChange,\n}: $Props) => {\n  const [optionsTable] = useState<string | string[]>(optionTable);\n  const [options, setOptions] = useState<IEntity[]>([]);\n  const [filteredOptions, setFilteredOptions] = useState<IEntity[]>([]);\n\n  const findAllItems = useCallback(\n    async (optionsTable: string[]) => {\n      let itemList: Promise<IEntity[]>[] = [];\n      optionsTable.forEach((table) => {\n        itemList.push(reciveAllFilteredPromise(table, filters !== undefined ? filters : []));\n      });\n      const results = await Promise.all(itemList);\n      results.forEach((items: IEntity[]) => {\n        setOptions((o) => o.concat(items));\n      });\n    },\n    [filters]\n  );\n\n  useEffect(() => {\n    if (typeof optionsTable === \"string\") {\n      reciveAllFiltered(optionsTable, filters !== undefined ? filters : [], (data: any[]) => {\n        setOptions(data);\n      });\n    }\n    if (optionsTable instanceof Array && optionsTable.length > 0) {\n      findAllItems(optionsTable);\n    }\n  }, [optionsTable, findAllItems, filters]);\n\n  const onSearch = useCallback(\n    (searchTerm: string) => {\n      onChange(searchTerm);\n      let newOptions = options.filter((option) => {\n        return option.name.includes(searchTerm);\n      });\n      setFilteredOptions(newOptions);\n    },\n    [options, onChange]\n  );\n\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input type=\"text\" value={value} onChange={(e) => onSearch(e.target.value)}></Input>\n      <Options>\n        {filteredOptions.length > 0 &&\n          filteredOptions.map((opt, index: number) => {\n            return (\n              <Option key={index} onClick={(e) => onSearch(opt.name)}>\n                {opt.name}\n              </Option>\n            );\n          })}\n      </Options>\n    </Field>\n  );\n};\n\nexport default AutoStringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  position: relative;\n  overflow: visible;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Options = styled.div`\n  display: none;\n  position: absolute;\n  border-bottom: none;\n  border-top: none;\n  z-index: 99;\n  top: 100%;\n  left: 0;\n  right: 0;\n  overflow: hidden;\n\n  &:hover {\n    display: block;\n  }\n`;\n\nconst Option = styled.div`\n  padding: 5px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  margin-bottom: 1px;\n  border-radius: 5px;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n\n  &:focus ~ ${Options} {\n    display: block;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Race, { RaceLimits } from \"../../../../data/Race\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport AutoStringField from \"../../../form_elements/AutoStringField\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { faTrash, faPlus, faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport SelectField from \"../../../form_elements/SelectField\";\nimport { makeEnumSelectable } from \"../../../../services/EnumService\";\nimport TextField from \"../../../form_elements/TextField\";\n\ninterface $Props {\n  race: Race;\n  onEdit: (value: Race) => void;\n}\n\nconst RaceEditView = ({ race, onEdit }: $Props) => {\n  const removeTalent = (oldTalent: string) => {\n    let newTalentList = race.talents.filter((talent) => talent !== oldTalent);\n    onEdit({ ...race, talents: newTalentList });\n  };\n  const addNewTalent = () => {\n    let newTalentList = [...race.talents];\n    newTalentList.push(\"\");\n    onEdit({ ...race, talents: newTalentList });\n  };\n  const onChangeTalent = (newTalent: string, i: number) => {\n    let talents = [...race.talents];\n    talents[i] = newTalent;\n    onEdit({ ...race, talents: talents });\n  };\n\n  const removeFlaw = (oldFlaw: string) => {\n    let newFlawList = race.flaws.filter((flaw) => flaw !== oldFlaw);\n    onEdit({ ...race, flaws: newFlawList });\n  };\n  const addNewFlaw = () => {\n    let newFlawList = [...race.flaws];\n    newFlawList.push(\"\");\n    onEdit({ ...race, flaws: newFlawList });\n  };\n  const onChangeFlaw = (newFlaw: string, i: number) => {\n    let flaws = [...race.flaws];\n    flaws[i] = newFlaw;\n    onEdit({ ...race, flaws: flaws });\n  };\n\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={race.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...race, name: name })}\n        />\n        <NumberField\n          value={race.hp}\n          label=\"Hp\"\n          onChange={(value) => onEdit({ ...race, hp: value })}\n        />\n        <NumberField\n          value={race.stamina}\n          label=\"Stamina\"\n          onChange={(value) => onEdit({ ...race, stamina: value })}\n        />\n        <NumberField\n          value={race.sprint}\n          label=\"Sprint\"\n          onChange={(value) => onEdit({ ...race, sprint: value })}\n        />\n        <StringField\n          value={race.size}\n          label=\"Size\"\n          onChange={(value) => onEdit({ ...race, size: value })}\n        />\n        <StringField\n          value={race.abilityModifier}\n          label=\"Ability Modifier\"\n          onChange={(abilityModifier) =>\n            onEdit({ ...race, abilityModifier: abilityModifier })\n          }\n        />\n        <SelectField\n          value={race.limit}\n          options={makeEnumSelectable(RaceLimits)}\n          label={\"Limit\"}\n          onClear={() => onEdit({ ...race, limit: RaceLimits.empty })}\n          onChange={(value: string) => {\n            onEdit({ ...race, limit: value });\n          }}\n        />\n        <TextField\n          value={race.description}\n          label=\"Effect\"\n          icon={faBookOpen}\n          onChange={(description) => onEdit({ ...race, description: description })}\n        />\n        {race.talents.map((talent: string, index: number) => {\n          return (\n            <Container key={index}>\n              <AutoStringField\n                optionTable={\"talents\"}\n                filters={[{ fieldName: \"isFlaw\", value: false, sort: 0 }]}\n                value={talent}\n                label=\"Talent\"\n                onChange={(newTalent) => onChangeTalent(newTalent, index)}\n              />\n              <IconButton icon={faTrash} onClick={() => removeTalent(talent)} />\n            </Container>\n          );\n        })}\n        <TextButton\n          text={\"Add new Talent\"}\n          icon={faPlus}\n          onClick={() => addNewTalent()}\n        />\n\n        {race.flaws.map((flaw: string, index: number) => {\n          return (\n            <Container key={index}>\n              <AutoStringField\n                optionTable={\"talents\"}\n                filters={[{ fieldName: \"isFlaw\", value: true, sort: 0 }]}\n                value={flaw}\n                label=\"Flaw\"\n                onChange={(newFlaw) => onChangeFlaw(newFlaw, index)}\n              />\n              <IconButton icon={faTrash} onClick={() => removeFlaw(flaw)} />\n            </Container>\n          );\n        })}\n        <TextButton\n          text={\"Add new Flaw\"}\n          icon={faPlus}\n          onClick={() => addNewFlaw()}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default RaceEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  flex: 1 1 100%;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport Spell from \"../../../../data/Spell\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport { sendEmbedMessage } from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\n\ninterface $Props {\n  spell: Spell;\n}\n\nconst SpellView = ({ spell }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            author: {\n              name: spell.name,\n            },\n            fields: [\n              {\n                name: \"Source\",\n                value: spell.source ? spell.source : \"-\",\n                inline: true,\n              },\n              {\n                name: \"Casting Time\",\n                value: spell.castTime ? spell.castTime : \"-\",\n                inline: true,\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [spell, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <School school={spell.school.label}>{spell.school.label}</School>\n\n        <Flag>\n          <b>{spell.drain}</b>\n        </Flag>\n        {spell.needsMaterial && (\n          <Flag>\n            <b>M</b>\n          </Flag>\n        )}\n        {spell.glyph && (\n          <Flag>\n            <b>G</b>\n          </Flag>\n        )}\n\n        <Name>\n          <b>{spell.name}</b>\n        </Name>\n\n        <PropWrapper>\n          <Prop>\n            <PropTitle>Source: </PropTitle>\n            {spell.source.label}\n          </Prop>\n          <Prop>\n            <PropTitle>Casting Time: </PropTitle>\n            {spell.castTime.label}\n          </Prop>\n          <Prop>\n            <PropTitle>Rite: </PropTitle>\n            {spell.rite.label}\n          </Prop>\n          <Prop>\n            <PropTitle>Range: </PropTitle>\n            {spell.range.label}\n          </Prop>\n        </PropWrapper>\n        <Text>\n          <PropTitle>Effect: </PropTitle>\n          <FormatedText text={spell.effect} />\n        </Text>\n        <Text>\n          <PropTitle>Mastery: </PropTitle>\n          <FormatedText text={spell.mastery} />\n        </Text>\n        <Text>\n          <PropTitle>Resist: </PropTitle>\n          <FormatedText text={spell.resist} />\n        </Text>\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${spell.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${spell.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={spell} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SpellView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\ntype SchoolType = {\n  school?: string;\n};\n\nconst School = styled.div<SchoolType>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  line-height: 30px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${(props) => {\n    if (props.school === \"Necromancy\") {\n      return \"#bef28e\";\n    } else if (props.school === \"Conjuration\") {\n      return \"#fce97a\";\n    } else if (props.school === \"Evocation\") {\n      return \"#db5740\";\n    } else if (props.school === \"Divination\") {\n      return \"#9ebed2\";\n    } else if (props.school === \"Enchantment\") {\n      return \"#ce90ca\";\n    } else if (props.school === \"Transmutation\") {\n      return \"#e19c60\";\n    } else if (props.school === \"Abjuration\") {\n      return \"#278ae4\";\n    } else if (props.school === \"Illusion\") {\n      return \"#8b42f9\";\n    } else {\n      return \"white\";\n    }\n  }};\n`;\n\nconst Flag = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Spell from \"../../../../data/Spell\";\nimport {\n  SpellDuration,\n  SpellRange,\n  SpellRite,\n  SpellSchool,\n  SpellSource,\n  SpellTarget,\n  SpellDrainType,\n  SpellCastTime,\n  SpellTargetingType,\n  SpellProjectileType,\n  SpellProjectileNumber,\n  SpellLosRange,\n  SpellAoeRadius,\n  SpellDamage,\n  SpellDamageType,\n  SpellScalingEffect,\n  SpellDirectEffects,\n  SpellSize,\n  SpellHp,\n  SpellPureDamage,\n} from \"../../../../data/SpellValues\";\nimport { SpellLevel } from \"../../../../data/SpellValues\";\nimport CheckField from \"../../../form_elements/CheckField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport SelectField from \"../../../form_elements/SelectField\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport TextField from \"../../../form_elements/TextField\";\n\ninterface $Props {\n  spell: Spell;\n  canBeSaved: (val: boolean) => void;\n  onEdit: (value: Spell) => void;\n}\n\nconst SpellEditView = ({ spell, canBeSaved, onEdit }: $Props) => {\n  useEffect(() => {\n    if (\n      spell.name.length > 0 &&\n      spell.school.label !== SpellSchool.NONE.label &&\n      spell.source.label !== SpellSource.NONE.label &&\n      spell.level.label !== SpellLevel.NONE.label &&\n      spell.rite.label !== SpellRite.NONE.label &&\n      spell.duration.label !== SpellDuration.NONE.label &&\n      spell.drainType.label !== SpellDrainType.NONE.label &&\n      spell.castTime.label !== SpellCastTime.NONE.label &&\n      spell.spellTarget.label !== SpellTarget.NONE.label &&\n      spell.range.label !== SpellRange.NONE.label &&\n      spell.targetingType.label !== SpellTargetingType.NONE.label\n    ) {\n      canBeSaved(true);\n    } else {\n      canBeSaved(false);\n    }\n  }, [spell, canBeSaved]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={spell.name}\n          label=\"Name *\"\n          onChange={(name) => onEdit({ ...spell, name: name })}\n        />\n        <SelectField\n          value={spell.school.label}\n          options={SpellSchool.getAll()}\n          label={\"School *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, school: SpellSchool.NONE }))\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, school: SpellSchool.find(value) })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.source.label}\n          options={SpellSource.getAll()}\n          label={\"Source *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, source: SpellSource.NONE }))\n          }\n          onChange={(category: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, source: SpellSource.find(category) })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.level.label + \"\"}\n          options={SpellLevel.getAll()}\n          label={\"Level *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, level: SpellLevel.NONE }))\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, level: SpellLevel.find(value) })\n            );\n          }}\n        />\n        <NumberField\n          value={spell.drain}\n          label=\"Drain *\"\n          onChange={(drain) => undefined}\n        />\n        <CheckField\n          value={spell.chargeable}\n          label=\"Chargeable?\"\n          onChange={(value: boolean) => {\n            onEdit(Spell.calcDrain({ ...spell, chargeable: value }));\n          }}\n        />\n        <CheckField\n          value={spell.needsMaterial}\n          label=\"Needs Material?\"\n          onChange={(value: boolean) => {\n            onEdit(Spell.calcDrain({ ...spell, needsMaterial: value }));\n          }}\n        />\n        <CheckField\n          value={spell.glyph}\n          label=\"Can be Glyph?\"\n          onChange={(value: boolean) => {\n            onEdit(Spell.calcDrain({ ...spell, glyph: value }));\n          }}\n        />\n        <Separator />\n        <SelectField\n          value={spell.rite.label}\n          options={SpellRite.getAll()}\n          label={\"Rite *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, rite: SpellRite.NONE }))\n          }\n          onChange={(category: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, rite: SpellRite.find(category) })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.duration.label}\n          options={SpellDuration.getAll()}\n          label={\"Duration *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, duration: SpellDuration.NONE }))\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, duration: SpellDuration.find(value) })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.drainType.label}\n          options={\n            spell.school.label === SpellSchool.NECROMANCY.label\n              ? SpellDrainType.getAll()\n              : [SpellDrainType.STUN.label]\n          }\n          label={\"Drain Type *\"}\n          onClear={() =>\n            onEdit(\n              Spell.calcDrain({ ...spell, drainType: SpellDrainType.NONE })\n            )\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                drainType: SpellDrainType.find(value),\n              })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.castTime.label}\n          options={\n            spell.drainType.label === SpellDrainType.PHYSICAL.label\n              ? SpellCastTime.getAllPhysical()\n              : SpellCastTime.getAllStun()\n          }\n          label={\"Casting Time *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, castTime: SpellCastTime.NONE }))\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, castTime: SpellCastTime.find(value) })\n            );\n          }}\n        />\n        <Separator />\n        <SelectField\n          value={spell.spellTarget.label}\n          options={SpellTarget.getAll()}\n          label={\"Spell Target *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, spellTarget: SpellTarget.NONE }))\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                spellTarget: SpellTarget.find(value),\n              })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.range.label}\n          options={SpellRange.getAll()}\n          label={\"Range *\"}\n          onClear={() =>\n            onEdit(Spell.calcDrain({ ...spell, range: SpellRange.NONE }))\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({ ...spell, range: SpellRange.find(value) })\n            );\n          }}\n        />\n        <SelectField\n          value={spell.targetingType.label}\n          options={SpellTargetingType.getAll()}\n          label={\"Targeting Type *\"}\n          onClear={() =>\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                targetingType: SpellTargetingType.NONE,\n              })\n            )\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                targetingType: SpellTargetingType.find(value),\n              })\n            );\n          }}\n        />\n        {spell.range.label === SpellRange.LOSAURA.label && (\n          <SelectField\n            value={spell.projectileType.label}\n            options={\n              spell.spellTarget.label === SpellTarget.AOE.label\n                ? SpellProjectileType.getAll()\n                : SpellProjectileType.getAllSingle()\n            }\n            label={\"Projectile Type\"}\n            onClear={() =>\n              onEdit(\n                Spell.calcDrain({\n                  ...spell,\n                  projectileType: SpellProjectileType.NONE,\n                })\n              )\n            }\n            onChange={(value: string) => {\n              onEdit(\n                Spell.calcDrain({\n                  ...spell,\n                  projectileType: SpellProjectileType.find(value),\n                })\n              );\n            }}\n          />\n        )}\n        {spell.range.label === SpellRange.LOSAURA.label &&\n          spell.projectileType.label !== SpellProjectileType.SPRAY.label && (\n            <SelectField\n              value={spell.projectileNumber.label}\n              options={SpellProjectileNumber.getAll()}\n              label={\"Projectile Number\"}\n              onClear={() =>\n                onEdit(\n                  Spell.calcDrain({\n                    ...spell,\n                    projectileNumber: SpellProjectileNumber.NONE,\n                  })\n                )\n              }\n              onChange={(value: string) => {\n                onEdit(\n                  Spell.calcDrain({\n                    ...spell,\n                    projectileNumber: SpellProjectileNumber.find(value),\n                  })\n                );\n              }}\n            />\n          )}\n        {spell.range.label !== SpellRange.SONIC.label &&\n          spell.range.label !== SpellRange.TOUCH.label &&\n          spell.range.label !== SpellRange.RADIUS90.label &&\n          spell.range.label !== SpellRange.RADIUS360.label && (\n            <SelectField\n              value={spell.losRange.label}\n              options={SpellLosRange.getAll()}\n              label={\"Line of Sight Range\"}\n              onClear={() =>\n                onEdit(\n                  Spell.calcDrain({ ...spell, losRange: SpellLosRange.NONE })\n                )\n              }\n              onChange={(value: string) => {\n                onEdit(\n                  Spell.calcDrain({\n                    ...spell,\n                    losRange: SpellLosRange.find(value),\n                  })\n                );\n              }}\n            />\n          )}\n        {spell.spellTarget.label === SpellTarget.AOE.label &&\n          spell.range.label !== SpellRange.TOUCH.label &&\n          spell.range.label !== SpellRange.LOSMANIPULATE.label && (\n            <SelectField\n              value={spell.aoeRadius.label}\n              options={SpellAoeRadius.getAll()}\n              label={\"Area of Effect Radius\"}\n              onClear={() =>\n                onEdit(\n                  Spell.calcDrain({ ...spell, aoeRadius: SpellAoeRadius.NONE })\n                )\n              }\n              onChange={(value: string) => {\n                onEdit(\n                  Spell.calcDrain({\n                    ...spell,\n                    aoeRadius: SpellAoeRadius.find(value),\n                  })\n                );\n              }}\n            />\n          )}\n        <Separator />\n        <SelectField\n          value={spell.damage[0]?.label}\n          options={SpellDamage.getAll()}\n          label={\"Damage/Healing 1\"}\n          onClear={() => {\n            let newDa = [...spell.damage];\n            newDa[0] = SpellDamage.NONE;\n            onEdit(Spell.calcDrain({ ...spell, damage: newDa }));\n          }}\n          onChange={(value: string) => {\n            let newDa = [...spell.damage];\n            newDa[0] = SpellDamage.find(value);\n            onEdit(Spell.calcDrain({ ...spell, damage: newDa }));\n          }}\n        />\n        <SelectField\n          value={spell.damage[1]?.label}\n          options={SpellDamage.getAll()}\n          label={\"Damage/Healing 2\"}\n          onClear={() => {\n            let newDa = [...spell.damage];\n            newDa[1] = SpellDamage.NONE;\n            onEdit(Spell.calcDrain({ ...spell, damage: newDa }));\n          }}\n          onChange={(value: string) => {\n            let newDa = [...spell.damage];\n            newDa[1] = SpellDamage.find(value);\n            onEdit(Spell.calcDrain({ ...spell, damage: newDa }));\n          }}\n        />\n        <SelectField\n          value={spell.damage[2]?.label}\n          options={SpellDamage.getAll()}\n          label={\"Damage/Healing 3\"}\n          onClear={() => {\n            let newDa = [...spell.damage];\n            newDa[2] = SpellDamage.NONE;\n            onEdit(Spell.calcDrain({ ...spell, damage: newDa }));\n          }}\n          onChange={(value: string) => {\n            let newDa = [...spell.damage];\n            newDa[2] = SpellDamage.find(value);\n            onEdit(Spell.calcDrain({ ...spell, damage: newDa }));\n          }}\n        />\n        {(spell.damage[0]?.label !== \"\" ||\n          spell.damage[1]?.label !== \"\" ||\n          spell.damage[2]?.label !== \"\") && (\n          <SelectField\n            value={spell.damageType.label}\n            options={SpellDamageType.getAll()}\n            label={\"Damage Type\"}\n            onClear={() =>\n              onEdit(\n                Spell.calcDrain({ ...spell, damageType: SpellDamageType.NONE })\n              )\n            }\n            onChange={(value: string) => {\n              onEdit(\n                Spell.calcDrain({\n                  ...spell,\n                  damageType: SpellDamageType.find(value),\n                })\n              );\n            }}\n          />\n        )}\n        <SelectField\n          value={spell.scalingEffect.label}\n          options={SpellScalingEffect.getAll()}\n          label={\"Scaling Effects\"}\n          onClear={() =>\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                scalingEffect: SpellScalingEffect.NONE,\n              })\n            )\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                scalingEffect: SpellScalingEffect.find(value),\n              })\n            );\n          }}\n        />\n\n        <Separator />\n        <SelectField\n          value={spell.directEffects.label}\n          options={SpellDirectEffects.getAll()}\n          label={\"Direct Effects\"}\n          onClear={() =>\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                directEffects: SpellDirectEffects.NONE,\n              })\n            )\n          }\n          onChange={(value: string) => {\n            onEdit(\n              Spell.calcDrain({\n                ...spell,\n                directEffects: SpellDirectEffects.find(value),\n              })\n            );\n          }}\n        />\n        {spell.directEffects.label ===\n          SpellDirectEffects.WALLBARRIERCONSTRUCTSUMMON.label && (\n          <>\n            <SelectField\n              value={spell.size.label}\n              options={SpellSize.getAll()}\n              label={\"Shield/Structure Size\"}\n              onClear={() =>\n                onEdit(Spell.calcDrain({ ...spell, size: SpellSize.NONE }))\n              }\n              onChange={(value: string) => {\n                onEdit(\n                  Spell.calcDrain({ ...spell, size: SpellSize.find(value) })\n                );\n              }}\n            />\n            <SelectField\n              value={spell.hp.label}\n              options={SpellHp.getAll()}\n              label={\"Armor/Hit Points\"}\n              onClear={() =>\n                onEdit(Spell.calcDrain({ ...spell, hp: SpellHp.NONE }))\n              }\n              onChange={(value: string) => {\n                onEdit(Spell.calcDrain({ ...spell, hp: SpellHp.find(value) }));\n              }}\n            />\n          </>\n        )}\n        <Separator />\n        {(spell.duration.label === SpellDuration.FIXEDTICKS.label ||\n          spell.duration.label === SpellDuration.FIXEDROUNDS.label ||\n          spell.duration.label === SpellDuration.FIXEDHOURS.label) && (\n          <StringField\n            value={spell.durationText}\n            label=\"Duration\"\n            onChange={(value) => onEdit({ ...spell, durationText: value })}\n          />\n        )}\n        {(spell.damageType.label === SpellDamageType.COMBINED.label ||\n          spell.damageType.label === SpellDamageType.PURE.label) && (\n          <SelectField\n            value={spell.pureDamage.label}\n            options={SpellPureDamage.getAll()}\n            label={\"Pure Spell Damage\"}\n            onClear={() =>\n              onEdit(\n                Spell.calcDrain({ ...spell, pureDamage: SpellPureDamage.NONE })\n              )\n            }\n            onChange={(value: string) => {\n              onEdit(\n                Spell.calcDrain({\n                  ...spell,\n                  pureDamage: SpellPureDamage.find(value),\n                })\n              );\n            }}\n          />\n        )}\n        <TextField\n          value={spell.effect}\n          label=\"Effect\"\n          icon={faBookOpen}\n          onChange={(value) => onEdit({ ...spell, effect: value })}\n        />\n        <TextField\n          value={spell.mastery}\n          label=\"Mastery\"\n          icon={faBookOpen}\n          onChange={(value) => onEdit({ ...spell, mastery: value })}\n        />\n        <TextField\n          value={spell.resist}\n          label=\"Resist\"\n          icon={faBookOpen}\n          onChange={(value) => onEdit({ ...spell, resist: value })}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SpellEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Separator = styled.div`\n  flex: 1 1 100%;\n  height: 10px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport TextField from \"../../../form_elements/TextField\";\nimport CheckField from \"../../../form_elements/CheckField\";\n\nimport { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport Power from \"../../../../data/Power\";\n\ninterface $Props {\n  power: Power;\n  onEdit: (value: Power) => void;\n}\n\nconst PowerEditView = ({ power, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <FieldGroup>\n          <StringField\n            value={power.name}\n            label=\"Name\"\n            onChange={(name) => onEdit({ ...power, name: name })}\n          />\n        </FieldGroup>\n        <FieldGroup>\n          <NumberField\n            value={power.cost}\n            label=\"Cost\"\n            onChange={(cost) => onEdit({ ...power, cost: cost })}\n          />\n          <CheckField\n            value={!!power.type}\n            label=\"Is Active?\"\n            onChange={(type) => onEdit({ ...power, type: type })}\n          />\n          {power.type && (\n            <StringField\n              value={power.ticks}\n              label=\"Ticks\"\n              onChange={(cost) => onEdit({ ...power, ticks: cost })}\n            />\n          )}\n          <CheckField\n            value={!!power.isAdept}\n            label=\"Is Adept?\"\n            onChange={(type) => onEdit({ ...power, isAdept: type })}\n          />\n          <StringField\n            value={power.path}\n            label=\"Path\"\n            onChange={(name) => onEdit({ ...power, path: name })}\n          />\n        </FieldGroup>\n        <TextField\n          value={power.prerequisite}\n          label=\"Prerequisite\"\n          icon={faBookOpen}\n          onChange={(prerequisite) =>\n            onEdit({ ...power, prerequisite: prerequisite })\n          }\n        />\n        <TextField\n          value={power.effect}\n          label=\"Effect\"\n          icon={faBookOpen}\n          onChange={(effect) => onEdit({ ...power, effect: effect })}\n        />\n        <TextField\n          value={power.stress}\n          label=\"Stress\"\n          icon={faBookOpen}\n          onChange={(effect) => onEdit({ ...power, stress: effect })}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default PowerEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst FieldGroup = styled.div`\n  flex: 2 1 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport {\n  formatDiscordText,\n  sendEmbedMessage,\n} from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport Power from \"../../../../data/Power\";\n\ninterface $Props {\n  power: Power;\n}\n\nconst PowerView = ({ power }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            author: {\n              name: power.name,\n            },\n            fields: [\n              {\n                name: \"Cost\",\n                value: power.cost ? power.cost : \"-\",\n                inline: true,\n              },\n              {\n                name: \"Ticks\",\n                value: power.ticks ? power.ticks : \"-\",\n                inline: true,\n              },\n              {\n                name: \"Stress\",\n                value: power.type ? power.stress : \"passive\",\n                inline: true,\n              },\n              {\n                name: \"Prerequisite\",\n                value: formatDiscordText(power.prerequisite),\n              },\n              {\n                name: \"Effect\",\n                value: formatDiscordText(power.effect),\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [power, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Cost>\n          <b>{power.cost}</b>\n        </Cost>\n        <Cost>\n          <b>{power.isAdept ? \"A\" : \"\"}</b>\n        </Cost>\n\n        <Name>\n          <b>{power.name}</b>\n        </Name>\n\n        <PropWrapper>\n          <Prop>\n            <PropTitle>Path: </PropTitle>\n            {power.path}\n          </Prop>\n          <Prop>\n            <PropTitle>Type: </PropTitle>\n            {power.type ? \"active\" : \"Passive\"}\n          </Prop>\n          {power.type && (\n            <Prop>\n              <PropTitle>Ticks: </PropTitle>\n              {power.ticks}\n            </Prop>\n          )}\n        </PropWrapper>\n        <Text>\n          <PropTitle>Prerequisite: </PropTitle>\n          <FormatedText text={power.prerequisite} />\n        </Text>\n        <Text>\n          <PropTitle>Effect: </PropTitle>\n          <FormatedText text={power.effect} />\n        </Text>\n        <Text>\n          <PropTitle>Stress: </PropTitle>\n          <FormatedText text={power.stress} />\n        </Text>\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${power.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${power.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={power} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default PowerView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Cost = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport { sendEmbedMessage } from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport Skill from \"../../../../data/Skill\";\n\ninterface $Props {\n  skill: Skill;\n}\n\nconst SkillView = ({ skill }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n\n  // useEffect(() => {\n  //   if (webhook !== undefined) {\n  //     let newJson = {\n  //       username: webhook.name + \" (SkirmishTome)\",\n  //       embeds: [\n  //         {\n  //           author: {\n  //             name: skill.name,\n  //           },\n  //           fields: [\n  //             {\n  //               name: \"Cost\",\n  //               value: skill.cost ? skill.cost : \"-\",\n  //               inline: true,\n  //             },\n  //             {\n  //               name: \"Ticks\",\n  //               value: skill.ticks ? skill.ticks : \"-\",\n  //               inline: true,\n  //             },\n  //             {\n  //               name: \"Stress\",\n  //               value: skill.type ? skill.stress : \"passive\",\n  //               inline: true,\n  //             },\n  //             {\n  //               name: \"Prerequisite\",\n  //               value: formatDiscordText(skill.prerequisite),\n  //             },\n  //             {\n  //               name: \"Effect\",\n  //               value: formatDiscordText(skill.effect),\n  //             },\n  //           ],\n  //         },\n  //       ],\n  //     };\n  //     setJson(JSON.stringify(newJson));\n  //   }\n  // }, [skill, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Cost>\n          <b>{skill.die}</b>\n        </Cost>\n\n        <Name>\n          <b>{skill.name}</b>\n        </Name>\n\n        <PropWrapper>\n          <Prop>\n            <PropTitle>Bonus: </PropTitle>\n            {skill.bonus}\n          </Prop>\n          <Prop>\n            <PropTitle>Mod: </PropTitle>\n            {skill.mod}\n          </Prop>\n          <Prop>\n            <PropTitle>Advantage: </PropTitle>\n            {skill.advantage}\n          </Prop>\n          <Prop>\n            <PropTitle>Disadvantage: </PropTitle>\n            {skill.disadvantage}\n          </Prop>\n        </PropWrapper>\n        <Text>\n          <PropTitle>Details: </PropTitle>\n          <FormatedText text={skill.details} />\n        </Text>\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${skill.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${skill.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={skill} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SkillView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Cost = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport TextField from \"../../../form_elements/TextField\";\n\nimport { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport SelectField from \"../../../form_elements/SelectField\";\nimport Skill, { SkillDie } from \"../../../../data/Skill\";\n\ninterface $Props {\n  skill: Skill;\n  onEdit: (value: Skill) => void;\n}\n\nconst SkillEditView = ({ skill, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <FieldGroup>\n          <StringField\n            value={skill.name}\n            label=\"Name\"\n            onChange={(name) => onEdit({ ...skill, name: name })}\n          />\n        </FieldGroup>\n        <FieldGroup>\n          <SelectField\n            value={skill.die}\n            options={[\n              SkillDie.dfour,\n              SkillDie.dsix,\n              SkillDie.deight,\n              SkillDie.dten,\n              SkillDie.dtwelve,\n            ]}\n            label={\"Die\"}\n            onClear={() => onEdit({ ...skill, die: \"\" })}\n            onChange={(category: string) => onEdit({ ...skill, die: category })}\n          />\n          <NumberField\n            value={skill.bonus}\n            label=\"Bonus\"\n            onChange={(cost) => onEdit({ ...skill, bonus: cost })}\n          />\n          <StringField\n            value={skill.mod}\n            label=\"Mod\"\n            onChange={(name) => onEdit({ ...skill, mod: name })}\n          />\n          <NumberField\n            value={skill.advantage}\n            label=\"Advantage\"\n            onChange={(cost) => onEdit({ ...skill, advantage: cost })}\n          />\n          <NumberField\n            value={skill.disadvantage}\n            label=\"Disadvantage\"\n            onChange={(cost) => onEdit({ ...skill, disadvantage: cost })}\n          />\n        </FieldGroup>\n        <TextField\n          value={skill.details}\n          label=\"Details\"\n          icon={faBookOpen}\n          onChange={(prerequisite) =>\n            onEdit({ ...skill, details: prerequisite })\n          }\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SkillEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst FieldGroup = styled.div`\n  flex: 2 1 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport {\n  formatDiscordText,\n  sendEmbedMessage,\n} from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport Item from \"../../../../data/Item\";\n\ninterface $Props {\n  item: Item;\n}\n\nconst ItemView = ({ item }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            author: {\n              name: item.name,\n            },\n            fields: [\n              {\n                name: \"Quality\",\n                value: item.quality ? item.quality : \"-\",\n                inline: true,\n              },\n              {\n                name: \"Description\",\n                value: formatDiscordText(item.description),\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [item, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Cost>\n          <b>{item.quality}</b>\n        </Cost>\n\n        <Name>\n          <b>{item.name}</b>\n        </Name>\n\n        <Text>\n          <PropTitle>Description: </PropTitle>\n          <FormatedText text={item.description} />\n        </Text>\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${item.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${item.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={item} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default ItemView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Cost = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport TextField from \"../../../form_elements/TextField\";\nimport CheckField from \"../../../form_elements/CheckField\";\n\nimport { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport Item from \"../../../../data/Item\";\n\ninterface $Props {\n  item: Item;\n  onEdit: (value: Item) => void;\n}\n\nconst ItemEditView = ({ item, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <FieldGroup>\n          <StringField\n            value={item.name}\n            label=\"Name\"\n            onChange={(name) => onEdit({ ...item, name: name })}\n          />\n        </FieldGroup>\n        <FieldGroup>\n          <StringField\n            value={item.quality}\n            label=\"Quality\"\n            onChange={(name) => onEdit({ ...item, quality: name })}\n          />\n        </FieldGroup>\n        <TextField\n          value={item.description}\n          label=\"Description\"\n          icon={faBookOpen}\n          onChange={(effect) => onEdit({ ...item, description: effect })}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default ItemEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst FieldGroup = styled.div`\n  flex: 2 1 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport CheckField from \"../../../form_elements/CheckField\";\n\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport Tradition from \"../../../../data/Tradition\";\nimport AutoStringField from \"../../../form_elements/AutoStringField\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport TextButton from \"../../../form_elements/TextButton\";\n\ninterface $Props {\n  tradition: Tradition;\n  onEdit: (value: Tradition) => void;\n}\n\nconst TraditionEditView = ({ tradition, onEdit }: $Props) => {\n  const removePower = (oldPower: string) => {\n    let newPowerList = tradition.powers.filter((power) => power !== oldPower);\n    onEdit({ ...tradition, powers: newPowerList });\n  };\n  const addNewPower = () => {\n    let newPowerList = [...tradition.powers];\n    newPowerList.push(\"\");\n    onEdit({ ...tradition, powers: newPowerList });\n  };\n  const onChangePower = (newPower: string, i: number) => {\n    let powers = [...tradition.powers];\n    powers[i] = newPower;\n    onEdit({ ...tradition, powers: powers });\n  };\n\n  return (\n    <CenterWrapper>\n      <View>\n        <FieldGroup>\n          <StringField\n            value={tradition.name}\n            label=\"Name\"\n            onChange={(name) => onEdit({ ...tradition, name: name })}\n          />\n        </FieldGroup>\n        <FieldGroup>\n          <CheckField\n            value={!!tradition.isPath}\n            label=\"Is Path?\"\n            onChange={(type) => onEdit({ ...tradition, isPath: type })}\n          />\n        </FieldGroup>\n        {tradition.powers.map((power: string, index: number) => {\n          return (\n            <Container key={index}>\n              <AutoStringField\n                optionTable={\"powers\"}\n                value={power}\n                label=\"Power\"\n                onChange={(newPower) => onChangePower(newPower, index)}\n              />\n              <IconButton icon={faTrash} onClick={() => removePower(power)} />\n            </Container>\n          );\n        })}\n        <TextButton\n          text={\"Add new Power\"}\n          icon={faPlus}\n          onClick={() => addNewPower()}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default TraditionEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst FieldGroup = styled.div`\n  flex: 2 1 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  flex: 1 1 100%;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { useWebhook } from \"../../../../hooks/webhookHook\";\nimport { useHistory } from \"react-router\";\nimport { sendEmbedMessage } from \"../../../../services/DiscordService\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport Tradition from \"../../../../data/Tradition\";\nimport Power from \"../../../../data/Power\";\nimport { reciveAll } from \"../../../../services/DatabaseService\";\n\ninterface $Props {\n  tradition: Tradition;\n}\n\nconst TraditionView = ({ tradition }: $Props) => {\n  let history = useHistory();\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [send, setSend] = useState<boolean>(false);\n  const [powers, setPowers] = useState<Power[]>([]);\n\n  useEffect(() => {\n    reciveAll(\"powers\", (results: any[]) => {\n      setPowers(results);\n    });\n  }, [tradition]);\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            author: {\n              name: tradition.name,\n            },\n            fields: [\n              {\n                name: \"Path\",\n                value: tradition.isPath ? \"yes\" : \"no\",\n                inline: true,\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [tradition, webhook]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Cost>\n          <b>{tradition.isPath ? \"P\" : \"-\"}</b>\n        </Cost>\n\n        <Name>\n          <b>{tradition.name}</b>\n        </Name>\n\n        <PropWrapper>\n          {webhook !== undefined && (\n            <TextButton\n              style={{\n                backgroundColor: \"#7289da\",\n              }}\n              text={`Cast ${tradition.name}`}\n              icon={faDiscord}\n              onClick={() => sendEmbedMessage(webhook, json)}\n            />\n          )}\n          {!send && (\n            <TextButton\n              text={`Send ${tradition.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          <PropWrapper>\n            {tradition.powers.length > 0 &&\n              tradition.powers.map((power, index: number) => {\n                const link: string =\n                  \"/power-detail/id/\" +\n                  powers.filter((pow) => pow.name === power)[0]?.id;\n                return (\n                  <PowerLink key={index} onClick={() => history.push(link)}>\n                    {power}\n                  </PowerLink>\n                );\n              })}\n          </PropWrapper>\n          {!!send && <P2PSender data={tradition} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default TraditionView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Cost = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst PowerLink = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  margin: 5px;\n  padding: 5px;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Character from \"../../../../data/Character\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport AutoStringField from \"../../../form_elements/AutoStringField\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { faTrash, faPlus, faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport SelectField from \"../../../form_elements/SelectField\";\nimport { makeEnumSelectable } from \"../../../../services/EnumService\";\nimport TextField from \"../../../form_elements/TextField\";\n\ninterface $Props {\n  character: Character;\n  onEdit: (value: Character) => void;\n}\n\nconst CharacterEditView = ({ character, onEdit }: $Props) => {\n  const removeTalent = (oldTalent: string) => {\n    let newTalentList = character.talents.filter((talent) => talent !== oldTalent);\n    onEdit({ ...character, talents: newTalentList });\n  };\n  const addNewTalent = () => {\n    let newTalentList = [...character.talents];\n    newTalentList.push(\"\");\n    onEdit({ ...character, talents: newTalentList });\n  };\n  const onChangeTalent = (newTalent: string, i: number) => {\n    let talents = [...character.talents];\n    talents[i] = newTalent;\n    onEdit({ ...character, talents: talents });\n  };\n\n  const removeFlaw = (oldFlaw: string) => {\n    let newFlawList = character.flaws.filter((flaw) => flaw !== oldFlaw);\n    onEdit({ ...character, flaws: newFlawList });\n  };\n  const addNewFlaw = () => {\n    let newFlawList = [...character.flaws];\n    newFlawList.push(\"\");\n    onEdit({ ...character, flaws: newFlawList });\n  };\n  const onChangeFlaw = (newFlaw: string, i: number) => {\n    let flaws = [...character.flaws];\n    flaws[i] = newFlaw;\n    onEdit({ ...character, flaws: flaws });\n  };\n\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={character.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...character, name: name })}\n        />\n       \n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default CharacterEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  flex: 1 1 100%;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport IEntity from \"../../../data/IEntity\";\nimport {\n  remove,\n  updateWithCallback,\n  createNewWithId,\n} from \"../../../services/DatabaseService\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n  faClone,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport BackButton from \"../../form_elements/BackButton\";\nimport IconButton from \"../../form_elements/IconButton\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../ToggleStyle\";\nimport Dialog from \"../Dialog\";\n\nimport RandomTableEditView from \"../../entities/random_tables/details/RandomTableEditView\";\nimport RandomTableView from \"../../entities/random_tables/details/RandomTableView\";\nimport TalentEditView from \"../../entities/talents/details/TalentEditView\";\nimport TalentView from \"../../entities/talents/details/TalentView\";\nimport RaceView from \"../../entities/races/details/RaceView\";\nimport RaceEditView from \"../../entities/races/details/RaceEditView\";\nimport SpellView from \"../../entities/spells/details/SpellView\";\nimport SpellEditView from \"../../entities/spells/details/SpellEditView\";\nimport PowerEditView from \"../../entities/powers/details/PowerEditView\";\nimport PowerView from \"../../entities/powers/details/PowerView\";\nimport SkillView from \"../../entities/skills/details/SkillView\";\nimport SkillEditView from \"../../entities/skills/details/SkillEditView\";\nimport ItemView from \"../../entities/items/details/ItemView\";\nimport ItemEditView from \"../../entities/items/details/ItemEditView\";\nimport TraditionEditView from \"../../entities/tradtitons/details/TradtitionEditView\";\nimport TraditionView from \"../../entities/tradtitons/details/TradtitionView\";\nimport CharacterView from \"../../entities/characters/details/CharacterView\";\nimport CharacterEditView from \"../../entities/characters/details/CharacterEditView\";\n\ninterface $Props {\n  entity: IEntity;\n  tableName: string;\n  isNew: boolean;\n  view: string;\n}\n\nconst EntityDetail = ({ entity, tableName, isNew, view }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n\n  const [entityObj, editEntity] = useState<IEntity>(entity);\n\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  const [canBeSaved, setCanBeSaved] = useState<boolean>(true);\n  let history = useHistory();\n\n  const deleteEntity = (entityId: number | undefined) => {\n    remove(tableName, entityId);\n    history.goBack();\n  };\n\n  useEffect(() => {\n    if (entityObj !== entity) {\n      setUnsavedChanges(true);\n    }\n  }, [entityObj, entity]);\n\n  const updateEntity = (entityObj: IEntity, msg: string) => {\n    if (canBeSaved) {\n      updateWithCallback(tableName, entityObj, (result) => {\n        if (result > 0) {\n          setUnsavedChanges(false);\n          setMessage(msg);\n          setAlert(true);\n        } else {\n          setMessage(\"Something went wrong!\");\n          setAlert(true);\n        }\n        setTimeout(() => {\n          setAlert(false);\n        }, 3000);\n      });\n    } else {\n      setMessage(\"Please fill out all required fields.\");\n      setAlert(true);\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    }\n  };\n\n  const duplicateEntity = (obj: IEntity) => {\n    let newObj = { ...obj };\n    delete newObj.id;\n    createNewWithId(tableName, newObj, (id) => {\n      editAndSaveEntity(\n        { ...entity, name: entity.name + \" [Clone]\" },\n        \"Cloning successful!\"\n      );\n    });\n  };\n\n  const editAndSaveEntity = (entity: IEntity, msg: string) => {\n    editEntity(entity);\n    updateEntity(entity, msg);\n  };\n\n  type viewOptions = {\n    [key: string]: (props: any) => JSX.Element;\n  };\n  const views: viewOptions = {\n    TalentView: TalentView,\n    TalentEditView: TalentEditView,\n    PowerView: PowerView,\n    PowerEditView: PowerEditView,\n    SkillView: SkillView,\n    SkillEditView: SkillEditView,\n    SpellView: SpellView,\n    SpellEditView: SpellEditView,\n    RaceView: RaceView,\n    RaceEditView: RaceEditView,\n    ItemView: ItemView,\n    ItemEditView: ItemEditView,\n    RandomTableView: RandomTableView,\n    RandomTableEditView: RandomTableEditView,\n    TraditionView: TraditionView,\n    TraditionEditView: TraditionEditView,\n    CharacterView: CharacterView,\n    CharacterEditView: CharacterEditView,\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${entity.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(tableName, entity.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {editMode && unsavedChanges && <Icon icon={faExclamationTriangle} />}\n        {editMode && (\n          <>\n            <IconButton\n              onClick={() => updateEntity(entityObj, \"Saved successful!\")}\n              icon={faSave}\n              disabled={!canBeSaved}\n            />\n            <IconButton\n              onClick={() => duplicateEntity(entityObj)}\n              icon={faClone}\n            />\n            <IconButton\n              onClick={() => deleteEntity(entityObj.id)}\n              icon={faTrash}\n            />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode\n        ? React.createElement(views[view + \"EditView\"], {\n            [view.toLocaleLowerCase()]: entityObj,\n            canBeSaved: (val: boolean) => setCanBeSaved(val),\n            onEdit: (value: any) => editEntity(value),\n          })\n        : React.createElement(views[view + \"View\"], {\n            [view.toLocaleLowerCase()]: entityObj,\n            onEdit: (value: any) =>\n              editAndSaveEntity(value, \"Saved successful!\"),\n          })}\n    </>\n  );\n};\n\nexport default EntityDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  width: 100%;\n  max-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n\n  @media (max-width: 576px) {\n    max-width: calc(100% - 20px);\n  }\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  text: string;\n  buttonText: string;\n  onButton: () => void;\n}\n\nconst ErrorTile = ({ text, buttonText, onButton }: $Props) => {\n  return (\n    <Tile>\n      <PropWrapper>\n        <Name>\n          <b>A problem occured!</b>\n        </Name>\n        <Text>\n          <PropTitle>Text: </PropTitle>\n          {text}\n        </Text>\n        <TextButton text={buttonText} onClick={() => onButton()} icon={faPlusCircle} />\n      </PropWrapper>\n    </Tile>\n  );\n};\n\nexport default ErrorTile;\n\nconst Tile = styled.div`\n  flex: 1 1 15em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 0 5px 5px 5px;\n  font-size: 14px;\n  width: calc(100% - 30px);\n  color: ${({ theme }) => theme.tile.headerColor};\n  text-align: center;\n  border-radius: 5px;\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 10px);\n  float: left;\n  padding: 5px 5px 0 5px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport Details from \"./EntityDetail\";\n\nimport { LoadingSpinner } from \"../../Loading\";\nimport ErrorTile from \"../ErrorTile\";\nimport {\n  createNewWithId,\n  recivePromise,\n  recivePromiseByAttribute,\n} from \"../../../services/DatabaseService\";\nimport IEntity from \"../../../data/IEntity\";\nimport { useCallback } from \"react\";\nimport Talent from \"../../../data/Talent\";\nimport RandomTable from \"../../../data/RandomTable\";\nimport Race from \"../../../data/Race\";\nimport Spell from \"../../../data/Spell\";\n\ntype TParams = { id?: string; name?: string };\n\nconst ToEntity = ({ match }: RouteComponentProps<TParams>) => {\n  let history = useHistory();\n  const [entityName, setEntityName] = useState<string>(\"\");\n  const [entity, setEntity] = useState<IEntity>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (entity !== undefined || error) {\n      setLoading(true);\n      setError(false);\n      setEntityName(\"\");\n      setEntity(undefined);\n    }\n    // eslint-disable-next-line\n  }, [match]);\n\n  const makeEntity = useCallback(\n    async (name: string) => {\n      let newEntity: IEntity | undefined = undefined;\n      if (match.params.name !== undefined)\n        newEntity = await recivePromiseByAttribute(name + \"s\", \"name\", match.params.name);\n      if (match.params.id !== undefined)\n        newEntity = await recivePromise(name + \"s\", +match.params.id);\n      setLoading(false);\n      if (newEntity === undefined) {\n        setEntityName(name);\n        setError(true);\n      } else {\n        setEntityName(name);\n        setEntity(newEntity);\n      }\n    },\n    [match]\n  );\n\n  useEffect(() => {\n    if (match !== undefined && entity === undefined) {\n      let newMatch: string = match.path\n        .split(\"/\")\n        .filter((match: string) => match.includes(\"-detail\"))[0]\n        .replaceAll(\"-detail\", \"\");\n      if (newMatch !== undefined) {\n        makeEntity(newMatch);\n      }\n    }\n  }, [match, makeEntity, entity]);\n\n  type entityOptions = {\n    [key: string]: IEntity;\n  };\n\n  const entities: entityOptions = {\n    talent: new Talent(0, match.params.name),\n    spell: new Spell(0, match.params.name),\n    race: new Race(0, match.params.name),\n    randomTables: new RandomTable(0, match.params.name),\n  };\n\n  const createNewEntity = () => {\n    let newEntity: IEntity = entities[entityName];\n    delete newEntity.id;\n    createNewWithId(entityName + \"s\", newEntity, (id) => {\n      history.push(`/${entityName}-detail/id/${id}`);\n    });\n  };\n\n  const capitalize = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return (\n    <>\n      {loading && <LoadingSpinner />}\n      {!loading && error && (\n        <ErrorTile\n          text={\"No such campaign exists. Want to creat such campaign?\"}\n          buttonText={\"Add\"}\n          onButton={() => createNewEntity()}\n        />\n      )}\n      {!error && !loading && entity !== undefined ? (\n        <Details\n          entity={entity}\n          tableName={entityName + \"s\"}\n          isNew={entity.name === \"\" ? true : false}\n          view={capitalize(entityName)}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default ToEntity;\n","import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { useWebhook } from \"../../hooks/webhookHook\";\nimport { rollCommand } from \"../../services/DiceService\";\nimport { formatDiscordText, sendEmbedMessage, sendMessage } from \"../../services/DiscordService\";\nimport IconButton from \"../form_elements/IconButton\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [formatedText, setFormatedText] = useState<JSX.Element[]>();\n  let history = useHistory();\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newText = formatDiscordText(text);\n      if (newText.length >= 2000) {\n        newText = newText.substring(0, 1997) + \"...\";\n      }\n      let newJson = {\n        username: webhook.name + \" (DnDTome)\",\n        content: newText,\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [text, webhook]);\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const rollDiscord = useCallback(\n    (command: string) => {\n      if (!command.includes(\"d\")) {\n        let newCommand = \"d20\" + command;\n        let value = parseInt(command.replaceAll(\"+\", \"\"));\n        const { result, text, rolls } = rollCommand(newCommand);\n\n        let krit = false;\n        if (result - value === 20) krit = true;\n        let fail = false;\n        if (result - value === 1) fail = true;\n\n        let rollString = \"d20\" + rolls + command;\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(\n            webhook,\n            result +\n              \" \" +\n              text +\n              (fail ? \" :red_circle:\" : \"\") +\n              (krit ? \" :green_circle:\" : \"\") +\n              \" ||\" +\n              rollString +\n              \"||\"\n          );\n        }\n      } else {\n        const { result, text, rolls } = rollCommand(command);\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(webhook, result + \" \" + text + \" ||\" + command + \" \" + rolls + \"||\");\n        }\n      }\n    },\n    [webhook]\n  );\n\n  const formatLink = useCallback(\n    (text: string, index: number): JSX.Element => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              let linkEntity = linkParts[0];\n              if (linkEntity === \"dice\") {\n                formattedParts.push(\n                  <TextPart key={\"TextPart\" + index}>\n                    <DiscordPart onClick={() => rollDiscord(linkParts[1])}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </DiscordPart>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              } else {\n                if (linkEntity === \"class\" || linkEntity === \"subclass\") linkEntity += \"e\";\n                if (linkParts[1].includes(\"|\")) {\n                  const entityParts = linkParts[1].split(\"|\");\n                  const link: string =\n                    \"/\" +\n                    linkEntity +\n                    \"-detail/name/\" +\n                    entityParts[0] +\n                    \"?source=\" +\n                    entityParts[1];\n                  formattedParts.push(\n                    <TextPart key={\"TextPart\" + index}>\n                      <Link onClick={() => history.push(link)}>\n                        <LinkCheck type={linkParts[0]} name={entityParts[0]} /> {entityParts[0]} (\n                        {entityParts[1]})\n                      </Link>\n                      <TextPart>{codePart[1]}</TextPart>\n                    </TextPart>\n                  );\n                } else {\n                  const link: string = \"/\" + linkEntity + \"-detail/name/\" + linkParts[1];\n                  formattedParts.push(\n                    <TextPart key={\"TextPart\" + index}>\n                      <Link onClick={() => history.push(link)}>\n                        <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                      </Link>\n                      <TextPart>{codePart[1]}</TextPart>\n                    </TextPart>\n                  );\n                }\n              }\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else if (text.length > 0) {\n          return <TextPart key={\"TextPart\" + index}>{text}</TextPart>;\n        }\n      }\n      return <></>;\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string): JSX.Element[] => {\n      if (textPart.includes(\"||tableStart||\")) {\n        let newTable: JSX.Element[] = [];\n        const table: string[] = text.split(\"||tableStart||\");\n\n        table.forEach((textPart: string, index: number) => {\n          if (textPart.includes(\"||tableEnd||\")) {\n            const tableEnd = textPart.split(\"||tableEnd||\");\n            const tableRows: string[] = tableEnd[0].split(\"||\");\n            let isHead = true;\n            newTable.push(\n              <table key={\"table\" + index}>\n                <tbody key={\"tbody\" + index}>\n                  {tableRows.map((row: string, index: number) => {\n                    if (row.includes(\"|\")) {\n                      if (isHead) {\n                        isHead = false;\n                        const cells = row.split(\"|\");\n                        return (\n                          <tr key={index}>\n                            {cells.map((cell: string, index: number) => {\n                              return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                            })}\n                          </tr>\n                        );\n                      } else {\n                        const cells = row.split(\"|\");\n                        return (\n                          <tr key={index}>\n                            {cells.map((cell: string, index: number) => {\n                              return <TableProp key={index}>{formatLink(cell, index)}</TableProp>;\n                            })}\n                          </tr>\n                        );\n                      }\n                    } else {\n                      return <></>;\n                    }\n                  })}\n                </tbody>\n              </table>\n            );\n            newTable.push(formatLink(tableEnd[1], index));\n          } else {\n            newTable.push(formatLink(table[0], index));\n          }\n        });\n        return newTable;\n      }\n      return [formatLink(textPart, 0)];\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return (\n    <FormatedTextContainer>\n      {webhook !== undefined && text !== \"\" && (\n        <IconButton\n          style={{\n            backgroundColor: \"#7289da\",\n            float: \"right\",\n            padding: \"5px\",\n          }}\n          icon={faDiscord}\n          onClick={() => sendEmbedMessage(webhook, json)}\n        />\n      )}\n      {formatedText}\n    </FormatedTextContainer>\n  );\n};\n\nexport default FormatedText;\n\nconst FormatedTextContainer = styled.div`\n  line-height: 20px;\n`;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  margin: 1px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst DiscordPart = styled(Link)`\n  background-color: #7289da;\n  color: white;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import IEntity from \"./IEntity\";\n\nexport enum SkillDie {\n  dfour = \"d4\",\n  dsix = \"d6\",\n  deight = \"d8\",\n  dten = \"d10\",\n  dtwelve = \"d12\",\n}\n\nexport default class Skill implements IEntity {\n  id?: number;\n  name: string;\n  details: string;\n  die: string;\n  bonus: number; //+1, +2, +3\n  mod: string; //+x\n  disadvantage: number; // + x Dis\n  advantage: number; // + x Adv\n\n  constructor(\n    id?: number,\n    name?: string,\n    details?: string,\n    die?: string,\n    bonus?: number, //+1, +2, +3\n    mod?: string, //+x\n    disadvantage?: number, // + x Dis\n    advantage?: number // + x Adv\n  ) {\n    this.id = id;\n    this.name = name || \"\";\n    this.details = details || \"\";\n    this.die = die || SkillDie.dfour;\n    this.bonus = bonus || 0;\n    this.mod = mod || \"\";\n    this.disadvantage = disadvantage || 0;\n    this.advantage = advantage || 0;\n  }\n\n  static makeCsv = (power: Skill): any[] => {\n    return [power.id, power.name];\n  };\n}\n\nexport function isSkill(arg: any): arg is Skill {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const costCheck = arg.cost !== undefined && typeof arg.cost == \"number\";\n  const isFlawCheck =\n    arg.isFlaw !== undefined && typeof arg.isFlaw == \"boolean\";\n  const prerequisiteCheck =\n    arg.prerequisite !== undefined && typeof arg.prerequisite == \"string\";\n  const effectCheck = arg.effect !== undefined && typeof arg.effect == \"string\";\n  const typeCheck = arg.type !== undefined && typeof arg.type == \"boolean\";\n  const stressCheck = arg.stress !== undefined && typeof arg.stress == \"string\";\n  const triggerCheck =\n    arg.trigger !== undefined && typeof arg.trigger == \"string\";\n  const triggerFrequencyCheck =\n    arg.triggerFrequency !== undefined &&\n    typeof arg.triggerFrequency == \"string\";\n  const ticksCheck = arg.ticks !== undefined && typeof arg.ticks == \"number\";\n\n  return (\n    arg &&\n    nameCheck &&\n    costCheck &&\n    isFlawCheck &&\n    prerequisiteCheck &&\n    effectCheck &&\n    typeCheck &&\n    stressCheck &&\n    triggerCheck &&\n    triggerFrequencyCheck &&\n    ticksCheck\n  );\n}\n","import IEntity from \"./IEntity\";\n\nexport default class RandomTable implements IEntity {\n  id?: number;\n  name: string;\n  header: string;\n  rows: { value: string; cells: string }[];\n  filename?: string;\n\n  constructor(\n    id?: number,\n    name?: string,\n    filename?: string,\n    header?: string,\n    rows?: { value: string; cells: string }[]\n  ) {\n    this.id = id;\n    this.filename = filename || \"\";\n    this.name = name || \"\";\n    this.header = header || \"\";\n    this.rows = rows || [];\n  }\n}\n\nexport function isRandomTable(arg: any): arg is RandomTable {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const headerCheck = arg.header !== undefined && typeof arg.header == \"string\";\n  const rowsCheck = arg.rows !== undefined && Array.isArray(arg.rows);\n\n  return arg && nameCheck && headerCheck && rowsCheck;\n}\n\nexport function findRandomTableFormattError(\n  arg: any\n): {\n  nameCheck: boolean;\n  headerCheck: boolean;\n  rowsCheck: boolean;\n} {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const headerCheck = arg.header !== undefined && typeof arg.header == \"string\";\n  const rowsCheck = arg.rows !== undefined && Array.isArray(arg.rows);\n\n  return {\n    nameCheck: nameCheck,\n    headerCheck: headerCheck,\n    rowsCheck: rowsCheck,\n  };\n}\n"],"sourceRoot":""}