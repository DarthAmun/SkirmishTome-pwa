{"version":3,"sources":["services/DiceService.tsx","services/DiscordService.tsx","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","hooks/webhookHook.tsx","components/help/Help.tsx","database/MyDatabase.tsx","services/DatabaseService.tsx","components/general_elements/TabBar.tsx","components/form_elements/IconButton.tsx"],"names":["rollCommand","commands","krit","result","text","newCommands","split","forEach","command","test","trim","multiplier","startsWith","parseInt","replaceAll","includes","rollDie","size","max","Math","round","random","sendMessage","webhook","content","avatar","undefined","request","XMLHttpRequest","open","hook","setRequestHeader","params","username","name","avatar_url","send","JSON","stringify","formatDiscordText","LinkCheck","type","useState","loading","setLoading","entitiyFound","setEntity","useEffect","newType","recivePromiseByAttributeCount","then","count","icon","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","FormatedText","localStorage","getItem","useWebhook","json","setJson","formatedText","setFormatedText","history","useHistory","newJson","embeds","fields","value","cut","str","cutStart","cutEnd","substr","rollDiscord","useCallback","newCommand","fail","formatLink","parts","formattedParts","part","index","codePart","linkParts","linkEntity","push","TextPart","key","DiscordPart","onClick","link","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","FormatedTextContainer","IconButton","style","backgroundColor","float","padding","faDiscord","console","log","sendEmbedMessage","styled","div","span","theme","tile","backgroundColorLink","th","input","color","td","Help","activeTab","setTab","General","TabBar","children","onChange","tab","HelpSection","SelectionTitle","SectionText","boxShadow","MyAppDatabase","spells","version","stores","Dexie","saveNew","tableName","entity","filename","db","a","put","prom","finally","close","saveNewFromList","entities","refinedEntities","bulkPut","reciveAll","callback","toArray","array","reciveCount","reciveCountPromise","where","equalsIgnoreCase","equals","reciveAllPromise","reciveAttributeSelectionPromise","attribute","orderBy","uniqueKeys","deleteAll","clear","Bar","child","Tab","e","isActive","buttons","props","floatLeft","disabled","transform","SimpleButton","left","Icon","DisabledSimpleButton","height","FontAwesomeIcon"],"mappings":"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","file":"static/js/7.b2515f55.chunk.js","sourcesContent":["export const rollCommand = (commands: string, krit?: boolean): { result: number; text: string } => {\n  let result = 0;\n  let text = \"\";\n\n  let newCommands = \"\";\n  commands.split(\" \").forEach((command) => {\n    if (/\\d+/g.test(command)) {\n      newCommands += command;\n    } else {\n      text += \" \" + command;\n    }\n  });\n  newCommands = newCommands.trim();\n\n  newCommands.split(\" \").forEach((command: string) => {\n    let multiplier: number = 1;\n    if (!command.startsWith(\"d\")) {\n      multiplier = parseInt(command.split(\"d\")[0]);\n      command = command.split(\"d\")[1];\n    }\n    command = command.replaceAll(\"d\", \"\");\n    if (krit) multiplier = multiplier * 2;\n\n    if (command.includes(\"+\")) {\n      result +=\n        multiplier * rollDie(parseInt(command.split(\"+\")[0])) + parseInt(command.split(\"+\")[1]);\n    } else if (command.includes(\"-\")) {\n      result +=\n        multiplier * rollDie(parseInt(command.split(\"-\")[0])) - parseInt(command.split(\"-\")[1]);\n    } else {\n      result += multiplier * rollDie(parseInt(command));\n    }\n  });\n  return { result: result, text: text };\n};\n\nexport const rollDie = (size: number): number => {\n  const min = 1;\n  const max = size;\n  let rand = Math.round(min + Math.random() * (max - min));\n  return rand;\n};\n","export const sendMessage = (\n  webhook: { hook: string; name: string } | undefined,\n  content: string,\n  avatar?: string\n) => {\n  if (webhook !== undefined) {\n    let request = new XMLHttpRequest();\n    request.open(\"POST\", webhook.hook);\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n    let params = {\n      username: webhook.name !== \"\" ? webhook.name : \"SkirmishTome\",\n      avatar_url: avatar !== undefined ? avatar : \"\",\n      content: content,\n    };\n    request.send(JSON.stringify(params));\n  }\n};\n\nexport const sendEmbedMessage = (\n  webhook: { hook: string; name: string } | undefined,\n  params: string\n) => {\n  if (webhook !== undefined) {\n    console.log(params);\n    let request = new XMLHttpRequest();\n    request.open(\"POST\", webhook.hook);\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n    request.send(params);\n  }\n};\n\nexport const formatDiscordText = (text: string): string => {\n  if (text.includes(\"[[\")) {\n    return text.replaceAll(\"[[\", \"*\").replaceAll(\"]]\", \"*\");\n  } else {\n    return text;\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n  GiDiceTwentyFacesTwenty,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (type === \"dice\") {\n      setEntity(true);\n      setLoading(false);\n    } else {\n      let newType = type + \"s\";\n      if (type === \"class\" || type === \"subclass\") newType = type + \"es\";\n      recivePromiseByAttributeCount(newType, \"name\", name).then((count: number) => {\n        setEntity(count > 0);\n        setLoading(false);\n      });\n    }\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n      case \"subrace\":\n        return <GiWomanElfFace />;\n      case \"class\":\n      case \"subclass\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n      case \"group\":\n        return <HiUserGroup />;\n      case \"dice\":\n        return <GiDiceTwentyFacesTwenty />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { useWebhook } from \"../../hooks/webhookHook\";\nimport { rollCommand } from \"../../services/DiceService\";\nimport { formatDiscordText, sendEmbedMessage, sendMessage } from \"../../services/DiscordService\";\nimport IconButton from \"../form_elements/IconButton\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newJson = {\n        username: webhook.name + \" (SkirmishTome)\",\n        embeds: [\n          {\n            fields: [\n              {\n                name: \"Text\",\n                value: formatDiscordText(text),\n              },\n            ],\n          },\n        ],\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [text, webhook]);\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const rollDiscord = useCallback(\n    (command: string) => {\n      if (!command.includes(\"d\")) {\n        let newCommand = \"d20\" + command;\n        let value = parseInt(command.replaceAll(\"+\", \"\"));\n        const { result, text } = rollCommand(newCommand);\n\n        let krit = false;\n        if (result - value === 20) krit = true;\n        let fail = false;\n        if (result - value === 1) fail = true;\n\n        let rollString = \"d20(`\" + (result - value) + \"`)\" + command;\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(\n            webhook,\n            result +\n              \" \" +\n              text +\n              (fail ? \" :red_circle:\" : \"\") +\n              (krit ? \" :green_circle:\" : \"\") +\n              \" ||\" +\n              rollString +\n              \"||\"\n          );\n        }\n      } else {\n        const { result, text } = rollCommand(command);\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(webhook, result + \" \" + text + \" ||\" + command + \"||\");\n        }\n      }\n    },\n    [webhook]\n  );\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              let linkEntity = linkParts[0];\n              if (linkEntity === \"dice\") {\n                formattedParts.push(\n                  <TextPart key={index}>\n                    <DiscordPart onClick={() => rollDiscord(linkParts[1])}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </DiscordPart>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              } else {\n                if (linkEntity === \"class\" || linkEntity === \"subclass\") linkEntity += \"e\";\n                const link: string = \"/\" + linkEntity + \"-detail/name/\" + linkParts[1];\n                formattedParts.push(\n                  <TextPart key={index}>\n                    <Link onClick={() => history.push(link)}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </Link>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              }\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return (\n    <FormatedTextContainer>\n      {webhook !== undefined && text !== \"\" && (\n        <IconButton\n          style={{\n            backgroundColor: \"#7289da\",\n            float: \"right\",\n            padding: \"5px\",\n          }}\n          icon={faDiscord}\n          onClick={() => sendEmbedMessage(webhook, json)}\n        />\n      )}\n      {formatedText}\n    </FormatedTextContainer>\n  );\n};\n\nexport default FormatedText;\n\nconst FormatedTextContainer = styled.div``;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst DiscordPart = styled(Link)`\n  background-color: #7289da;\n  color: white;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","export function useWebhook(): { hook: string; name: string } | undefined {\n  if (localStorage.getItem(\"webhook\") !== null && localStorage.getItem(\"webhook\") !== \"\") {\n    let name = \"SkirmishTome\";\n    if (localStorage.getItem(\"webhook_user\") !== null)\n      name = localStorage.getItem(\"webhook_user\") + \"\";\n    return { hook: localStorage.getItem(\"webhook\") + \"\", name: name };\n  } else return undefined;\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport FormatedText from \"../general_elements/FormatedText\";\nimport TabBar from \"../general_elements/TabBar\";\n\nconst Help = () => {\n  const [activeTab, setTab] = useState<string>(\"Install\");\n\n  return (\n    <>\n      <General>\n        <TabBar\n          children={[\"Install\", \"Create\", \"Import\", \"Export\", \"Text Formating\", \"Modifiers\"]}\n          onChange={(tab: string) => setTab(tab)}\n          activeTab={activeTab}\n        />\n        {activeTab === \"Install\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to install SkirmishTome on desktop</SelectionTitle>\n              <SectionText>\n                To install this webapp as an app use chrome and click on the plus in your navigation\n                bar right next to the favorite star icon.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to install SkirmishTome on mobile</SelectionTitle>\n              <SectionText>\n                To install this webapp as an app on mobile find and click the \"Add to home screen\"\n                option in your firefox, chrome or safari.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Create\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to create Entitys</SelectionTitle>\n              <SectionText>\n                To create a new Spell for example go to Spells and hit \"Add Spell\" in the top\n                middle.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create Sub-Entitys</SelectionTitle>\n              <SectionText>\n                For subclasses/subraces you need to visit a class/race and click the little circled\n                + in the subclass/subrace section of the class/race.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Import\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to import Entitiys via .json files</SelectionTitle>\n              <SectionText>\n                Go to options and select a file in the top left file select dialog titled \"Import\".\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import Entitiys via the send functionallity</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to recive. Add the ID of the sender to the filed and\n                accept sended entities.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import 5eTools files</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to \"Other Import\" and select the file dialog suited for\n                the entity you want to import.\n              </SectionText>\n              <SectionText>Your entity is not listed there?</SectionText>\n              <SectionText>Those will be updated and added gradually.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import from other sources</SelectionTitle>\n              <SectionText>\n                As of now only SkirmishTome and 5eTools .json files are supported.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Export\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to export Entitiys to .json files</SelectionTitle>\n              <SectionText>\n                Go to options and click the \"export\"-Button located in the top right section titled\n                \"Export\". This will export your hole collection to one big file! (Excluding your pdf\n                library)\n              </SectionText>\n              <SectionText>\n                Or go to options and navigate to the entities you want to send for example \"Spells\".\n                There you can export all your spells to one file.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to send Entitiys via the send functionallity</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to the entities you want to send for example \"Spells\".\n                Click the \"Send all Spells\"-Button and copy the ID.\n              </SectionText>\n              <SectionText>\n                Or go to the entities overview and choose a single entity for example a spell called\n                \"Heal\". Click the \"Send Heal\"-Button and copy the ID.\n              </SectionText>\n              <SectionText>You can now send the ID to the reciver.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to export 5eTools files</SelectionTitle>\n              <SectionText>Not supported as of now.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to export to other sources</SelectionTitle>\n              <SectionText>As of now you can only export to SkirmishTome .json files.</SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Text Formating\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to create a hyper-link</SelectionTitle>\n              <SectionText>You can add a hyper-link in every textarea.</SectionText>\n              <SectionText>\n                To do so write: [[spell.Heal Me]] to link to the spell with the name \"Heal Me\".\n              </SectionText>\n              <SectionText>\n                Result: <FormatedText text={\"[[spell.Heal Me]]\"} />\n              </SectionText>\n              <SectionText>This works for all entities.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a table</SelectionTitle>\n              <SectionText>You can add a table in every textarea.</SectionText>\n              <SectionText>\n                To do so write: <br />\n                ||table||\n                <br />\n                ||\"Header1\"|\"Header2\"|\"Header3\"|...||\n                <br />\n                ||\"Cell1\"|\"Cell2\"|\"Cell3\"|...||\n                <br />\n                ||...||\n              </SectionText>\n              <SectionText>\n                Result:{\" \"}\n                <FormatedText\n                  text={`||table||||Header1|Header2|Header3|...||||Cell1|Cell2|Cell3|...||`}\n                />\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a discord \"Link\" to roll dice</SelectionTitle>\n              <SectionText>You can add a discord-link in every textarea.</SectionText>\n              <SectionText>To do so write: [[dice.+2 to hit]] to roll a d20+2 in discord.</SectionText>\n              <SectionText>\n                Result: <FormatedText text={`[[dice.+2 to hit]]`} />\n              </SectionText>\n              <SectionText>Or write: [[dice.2d12+6 radiant damage]] to roll a \"2d12+6 radiant damage\" in discord.</SectionText>\n              <SectionText>\n                Result: <FormatedText text={`[[dice.2d12+6 radiant damage]]`} />\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a table with links in it</SelectionTitle>\n              <SectionText>\n                You can add a link to every cell of a table in every textarea.\n              </SectionText>\n              <SectionText>\n                To do so write: <br />\n                ||table||\n                <br />\n                ||\"Header1\"|\"Header2\"|\"Header3\"|...||\n                <br />\n                ||\"[[spell.Heal Me]]\"|\"Cell2\"|\"Cell3\"|...||\n                <br />\n                ||...||\n              </SectionText>\n              <SectionText>\n                Result:{\" \"}\n                <FormatedText\n                  text={`||table||||Header1|Header2|Header|...||||[[spell.Heal Me]]|Cell2|Cell3|...||`}\n                />\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Modifiers\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>What are modifiers?</SelectionTitle>\n              <SectionText>\n                Modifiers enable you to give class-, subclass-, race-, subracefeatures and magic\n                items (for now) spezial modifiers that will directly modify the character using\n                those things.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Equal modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'='value'}}\"} to a feature.</SectionText>\n              <SectionText>\n                For example: {\"{{ac=15}}\"} or {'{{alignment=\"Real Evil\"}'}\n              </SectionText>\n              <SectionText>\n                You can even alter deeper values like: {\"{{saves.chaSaveProf=1}}\"}\n              </SectionText>\n              <SectionText>\n                Complex example: {\"{{ac=10+(([dex]-10)/2)+(([con]-10)/2)}}\"} where{\" \"}\n                {\"(([dex]-10)/2)\"} gives you the bonus for the stat.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Add modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'+'value'}}\"} to a feature.</SectionText>\n              <SectionText>\n                For example: {\"{{ac+3}}\"} or {'{{profs+\"Thiefs tools\"}'}\n              </SectionText>\n              <SectionText>Deep example: {\"{{skills.natureProf+1}}\"}</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Substract modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'-'value'}}\"} to a feature.</SectionText>\n              <SectionText>For example: {\"{{ac-3}}\"}</SectionText>\n              <SectionText>Deep example: {\"{{money.gold-100}}\"}</SectionText>\n              <SectionText>No option for removing something from a text yet!</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Add modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'.add='value'}}\"} to a feature.</SectionText>\n              <SectionText>For example: {'{{spells.add=\"Acid Splash\"}}'}</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Character fields that can be accessed</SelectionTitle>\n              <SectionText>\n                name: text\n                <br /> player: text\n                <br /> pic: text\n                <br /> background: text\n                <br /> ac: number\n                <br /> hp: number\n                <br /> currentHp: number\n                <br /> init: number\n                <br /> speed: text\n                <br /> str: number\n                <br /> dex: number\n                <br /> con: number\n                <br /> int: number\n                <br /> wis: number\n                <br /> cha: number\n                <br /> actions: text\n                <br /> profsLangs: text\n                <br /> senses: text\n                <br /> alignment: text\n                <br /> inspiration: number\n                <br /> castingHit: number\n                <br /> castingDC: number\n                <br /> money: Money\n                <br /> skills: Skills\n                <br /> saves: Saves\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Money fields that can be accessed</SelectionTitle>\n              <SectionText>\n                copper: number\n                <br /> silver: number\n                <br /> electrum: number\n                <br /> gold: number\n                <br /> platinum: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Saves fields that can be accessed</SelectionTitle>\n              <SectionText>\n                strSaveProf: number\n                <br /> dexSaveProf: number\n                <br /> conSaveProf: number\n                <br /> intSaveProf: number\n                <br /> wisSaveProf: number\n                <br /> chaSaveProf: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Skills fields that can be accessed</SelectionTitle>\n              <SectionText>\n                acrobaticsProf: number\n                <br /> animalHandlingProf: number\n                <br /> arcanaProf: number\n                <br /> athleticsProf: number\n                <br /> deceptionProf: number\n                <br /> historyProf: number\n                <br /> insightProf: number\n                <br /> intimidationProf: number\n                <br /> investigationProf: number\n                <br /> medicineProf: number\n                <br /> natureProf: number\n                <br /> perceptionProf: number\n                <br /> performanceProf: number\n                <br /> persuasionProf: number\n                <br /> religionProf: number\n                <br /> sleightOfHandProf: number\n                <br /> stealthProf: number\n                <br /> survivalProf: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Fields you can add something to</SelectionTitle>\n              <SectionText>\n                monsters\n                <br /> spells\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n      </General>\n    </>\n  );\n};\n\nexport default Help;\n\nconst General = styled.div`\n  flex: 1 1 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst HelpSection = styled.div`\n  flex: 1 1 20em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 3px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n\nconst SectionText = styled.div`\n  flex: 1 1 auto;\n  width: calc(100% - 10px);\n  padding: 5px;\n`;\n","import Dexie from \"dexie\";\nimport Spell from \"../data/Spell\";\n\nexport class MyAppDatabase extends Dexie {\n  spells: Dexie.Table<Spell, number>;\n\n  constructor() {\n    super(\"SkirmishTomeDB\");\n    this.version(1).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n    });\n   \n    this.spells = this.table(\"spells\");\n  }\n}\n","import { MyAppDatabase } from \"../database/MyDatabase\";\nimport { IndexableType } from \"dexie\";\nimport IEntity from \"../data/IEntity\";\nimport Filter from \"../data/Filter\";\n\nexport const update = (tableName: string, data: IEntity) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).update(data.id, data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const updateWithCallback = (\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .update(data.id, data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const save = (tableName: string, data: IEntity) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).add(data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNew = (tableName: string, entity: IEntity, filename: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      delete entity[\"id\"];\n      const prom = await db.table(tableName).put({ ...entity, filename: filename });\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNewFromList = (tableName: string, entities: IEntity[], filename: string) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(async function () {\n      const refinedEntities = (entities as IEntity[]).map((entity: IEntity) => {\n        delete entity[\"id\"];\n        return { ...entity, filename: filename };\n      });\n      const prom = await db.table(tableName).bulkPut(refinedEntities);\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveWithCallback = (\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .add(data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const remove = (tableName: string, id: number | undefined) => {\n  const db = new MyAppDatabase();\n  if (id !== undefined) {\n    db.open()\n      .then(function () {\n        db.table(tableName).delete(id);\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAll = (tableName: string, callback: (data: IndexableType[]) => void) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCount = (tableName: string, callback: (value: number) => void) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).count((count) => {\n        callback(count);\n      });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCountPromise = (tableName: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).count();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveByAttribute = (\n  tableName: string,\n  name: string,\n  value: string,\n  callback: (data: IEntity) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray()\n        .then((array) => {\n          callback(array[0]);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttribute = (tableName: string, name: string, value: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      const array = await db.table(tableName).where(name).equalsIgnoreCase(value).toArray();\n      return array[0];\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromise = (tableName: string, value: number) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).get(value);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttributeCount = (\n  tableName: string,\n  name: string,\n  value: string | number\n) => {\n  const db = new MyAppDatabase();\n  if (typeof value === \"string\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equalsIgnoreCase(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else if (typeof value === \"number\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equals(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else {\n    return db\n      .open()\n      .then(async function () {\n        return await db\n          .table(tableName)\n          .where(name)\n          .equalsIgnoreCase(\"\" + value)\n          .count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAllPromise = (tableName: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).toArray();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const applyFilters = (obj: any, filters: Filter[]) => {\n  let test: boolean[] = [];\n  filters.forEach((filter) => {\n    if (typeof filter.value === \"string\") {\n      if (obj[filter.fieldName] instanceof Array) {\n        let hasTag = false;\n        obj[filter.fieldName].forEach((fieldPart: string) => {\n          // @ts-ignore\n          if (fieldPart.toLowerCase().includes(filter.value.toLowerCase())) {\n            hasTag = true;\n          }\n        });\n        if (hasTag) {\n          test.push(true);\n        } else {\n          test.push(false);\n        }\n      } else {\n        test.push(\n          // @ts-ignore\n          obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n        );\n      }\n    } else if (typeof filter.value === \"number\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (typeof filter.value === \"boolean\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (filter.value instanceof Array) {\n      let arrayTest: boolean = false;\n      filter.value.forEach((filterPart: string | boolean | number) => {\n        if (typeof filterPart === \"string\") {\n          if (\n            // @ts-ignore\n            obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n          )\n            arrayTest = true;\n        } else if (typeof filterPart === \"number\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        } else if (typeof filterPart === \"boolean\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        }\n      });\n      test.push(arrayTest);\n    }\n  });\n\n  let result = true;\n  test.forEach((val) => {\n    if (!val) result = false;\n  });\n  return result;\n};\n\nexport const reciveAllFiltered = (\n  tableName: string,\n  filters: Filter[],\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      } else {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAllFilteredPromise = (tableName: string, filters: Filter[]) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        return db\n          .table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled);\n      } else {\n        return db\n          .table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled);\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelection = (\n  tableName: string,\n  attribute: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(attribute)\n        .uniqueKeys(function (array) {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelectionPromise = (tableName: string, attribute: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).orderBy(attribute).uniqueKeys();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const createNewWithId = (\n  tableName: string,\n  entity: IEntity,\n  callback: (id: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .put(entity)\n        .then((id: number) => {\n          callback(id);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteAll = (tableName: string) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).clear();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const exportFilteredFromTable = (tableName: string, filters: Filter[], filename: string) => {\n  reciveAllFiltered(tableName, filters, (all: IndexableType[]) => {\n    let contentType = \"application/json;charset=utf-8;\";\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(all)))], {\n        type: contentType,\n      });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement(\"a\");\n      a.download = filename;\n      a.href = \"data:\" + contentType + \",\" + encodeURIComponent(JSON.stringify(all));\n      a.target = \"_blank\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  });\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: string[];\n  activeTab?: string;\n  onChange: (name: string) => void;\n}\n\nconst TabBar = ({ children, activeTab, onChange }: $Props) => {\n  return (\n    <Bar>\n      {children.map((child, index) => {\n        return (\n          <Tab key={index} onClick={(e) => onChange(child)} isActive={child === activeTab}>\n            {child}\n          </Tab>\n        );\n      })}\n    </Bar>\n  );\n};\n\nexport default TabBar;\n\nconst Bar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 1 1 auto;\n  padding: 3px;\n  margin: 5px;\n  border-radius: 10px;\n  position: relative;\n  z-index: 100;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n`;\n\ntype ActiveType = {\n  isActive?: boolean;\n};\n\nconst Tab = styled.div<ActiveType>`\n  flex: 3 1 auto;\n  height: 30px;\n  line-height: 20px;\n  padding: 5px;\n  box-sizing: border-box;\n  text-align: center;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin: 2px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttons.backgroundColor};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  ${(props) => {\n    if (props.isActive) {\n      return `background-color: ${props.theme.buttons.backgroundColor}; \n      color: ${props.theme.buttons.color};`;\n    }\n  }}\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  style?: any;\n  onClick?: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, style, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick} style={style}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton style={style}>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n"],"sourceRoot":""}