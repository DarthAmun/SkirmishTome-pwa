{"version":3,"sources":["components/general_elements/SmallFormatedText.tsx","components/entities/talents/TalentTile.tsx","database/MyDatabase.tsx","services/DatabaseService.tsx","components/form_elements/IconButton.tsx","hooks/webhookHook.tsx","services/DiscordService.tsx","data/Talent.tsx","services/DiceService.tsx","components/general_elements/LinkCheck.tsx"],"names":["SmallFormatedText","text","webhook","useWebhook","useState","formatedText","setFormatedText","history","useHistory","cut","str","cutStart","cutEnd","substr","rollDiscord","useCallback","command","includes","rollCommand","result","undefined","sendMessage","newCommand","value","parseInt","replaceAll","krit","fail","rollString","formatLink","parts","split","formattedParts","forEach","part","index","codePart","linkParts","linkEntity","push","TextPart","key","DiscordPart","onClick","LinkCheck","type","name","link","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","useEffect","FormatedTextContainer","styled","div","span","theme","tile","backgroundColorLink","color","th","input","backgroundColor","td","TalentTile","talent","Tile","to","id","$isflaw","isFlaw","Cost","cost","Name","PropWrapper","Prop","stress","prerequisite","props","boxShadow","main","highlight","MyAppDatabase","randomTables","talents","races","spells","version","stores","Dexie","updateWithCallback","tableName","data","callback","db","open","then","update","finally","close","saveNew","entity","filename","a","put","prom","saveNewFromList","entities","refinedEntities","bulkPut","remove","delete","reciveAll","toArray","array","reciveCount","count","reciveCountPromise","recivePromiseByAttribute","where","equalsIgnoreCase","recivePromise","get","recivePromiseByAttributeCount","equals","reciveAllPromise","applyFilters","obj","filters","test","filter","fieldName","Array","hasTag","fieldPart","toLowerCase","arrayTest","filterPart","val","reciveAllFiltered","sortedFiled","reverse","sort","sortBy","reciveAllFilteredPromise","reciveAttributeSelectionPromise","attribute","orderBy","uniqueKeys","createNewWithId","deleteAll","clear","exportFilteredFromTable","all","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","IconButton","icon","floatLeft","disabled","transform","style","SimpleButton","left","Icon","DisabledSimpleButton","buttons","height","FontAwesomeIcon","localStorage","getItem","hook","content","avatar","request","XMLHttpRequest","setRequestHeader","params","username","avatar_url","send","sendEmbedMessage","console","log","formatDiscordText","TalentCategory","Talent","category","effect","trigger","triggerFrequency","this","magical","isTalent","arg","nameCheck","costCheck","isFlawCheck","prerequisiteCheck","effectCheck","typeCheck","stressCheck","triggerCheck","triggerFrequencyCheck","commands","newCommands","trim","rolls","fullCommand","commandSplits","concat","multiplier","startsWith","com","i","newRoll","rollDie","slice","size","max","Math","round","random","loading","setLoading","entitiyFound","setEntity","newType","catch","formatIcon"],"mappings":"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","file":"static/js/2.730da2c8.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { useWebhook } from \"../../hooks/webhookHook\";\nimport { rollCommand } from \"../../services/DiceService\";\nimport { sendMessage } from \"../../services/DiscordService\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst SmallFormatedText = ({ text }: $Props) => {\n  let webhook = useWebhook();\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const rollDiscord = useCallback(\n    (command: string) => {\n      if (!command.includes(\"d\")) {\n        let newCommand = \"d20\" + command;\n        let value = parseInt(command.replaceAll(\"+\", \"\"));\n        const { result, text } = rollCommand(newCommand);\n\n        let krit = false;\n        if (result - value === 20) krit = true;\n        let fail = false;\n        if (result - value === 1) fail = true;\n\n        let rollString = \"d20(`\" + (result - value) + \"`)\" + command;\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(\n            webhook,\n            result +\n              \" \" +\n              text +\n              (fail ? \" :red_circle:\" : \"\") +\n              (krit ? \" :green_circle:\" : \"\") +\n              \" ||\" +\n              rollString +\n              \"||\"\n          );\n        }\n      } else {\n        const { result, text } = rollCommand(command);\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(webhook, result + \" \" + text + \" ||\" + command + \"||\");\n        }\n      }\n    },\n    [webhook]\n  );\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              let linkEntity = linkParts[0];\n              if (linkEntity === \"dice\") {\n                formattedParts.push(\n                  <TextPart key={index}>\n                    <DiscordPart onClick={() => rollDiscord(linkParts[1])}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </DiscordPart>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              } else {\n                if (linkEntity === \"class\" || linkEntity === \"subclass\") linkEntity += \"e\";\n                const link: string = \"/\" + linkEntity + \"-detail/name/\" + linkParts[1];\n                formattedParts.push(\n                  <TextPart key={index}>\n                    <Link onClick={() => history.push(link)}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </Link>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              }\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return <FormatedTextContainer>{formatedText}</FormatedTextContainer>;\n};\n\nexport default SmallFormatedText;\n\nconst FormatedTextContainer = styled.div`\n  padding: 5px;\n`;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst DiscordPart = styled(Link)`\n  background-color: #7289da;\n  color: white;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport Talent from \"../../../data/Talent\";\nimport SmallFormatedText from \"../../general_elements/SmallFormatedText\";\n\ninterface $Props {\n  talent: Talent;\n}\n\nconst TalentTile = ({ talent }: $Props) => {\n  return (\n    <Tile to={\"/talent-detail/id/\" + talent.id} $isflaw={talent.isFlaw}>\n      <Cost>\n        <b>{talent.cost}</b>\n      </Cost>\n\n      <Name>\n        <b>{talent.name}</b>\n      </Name>\n\n      <PropWrapper>\n        <Prop>{talent.type ? talent.stress : \"Passive\"}</Prop>\n        <SmallFormatedText text={talent.prerequisite} />\n      </PropWrapper>\n    </Tile>\n  );\n};\n\nexport default TalentTile;\n\ntype type = {\n  $isflaw: boolean;\n};\n\nconst Tile = styled(Link)<type>`\n  flex: 1 1 15em;\n  color: ${({ theme }) => theme.tile.color};\n  ${(props) => {\n    if (props.$isflaw) {\n      return `background-color: ${props.theme.input.backgroundColor};`;\n    } else {\n      return `background-color: ${props.theme.tile.backgroundColor};`;\n    }\n  }}\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n  cursor: pointer;\n\n  --notchSize: 15px;\n  clip-path: polygon(\n    0% var(--notchSize),\n    var(--notchSize) 0%,\n    100% 0%,\n    100% calc(100% - var(--notchSize)),\n    calc(100% - var(--notchSize)) 100%,\n    0 100%\n  );\n`;\n\nconst Cost = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: right;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  border-bottom: solid 1px ${({ theme }) => theme.main.highlight};\n  margin: 5px;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 0 5px 5px 5px;\n  font-size: 14px;\n  width: calc(100% - 30px);\n  color: white;\n  text-align: center;\n  border-radius: 5px;\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 10px);\n  float: left;\n  padding: 5px 5px 0 5px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Prop = styled.div`\n  height: 12px;\n  width: calc(50% - 22.5px);\n  margin: 0 0 5px 5px;\n  float: left;\n  line-height: 10px;\n  padding: 10px;\n  font-size: 12px;\n  border-radius: 5px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n\n  &:nth-child(odd) {\n  margin: 0 0 5px 0px;\n  }\n}\n`;\n","import Dexie from \"dexie\";\nimport Race from \"../data/Race\";\nimport RandomTable from \"../data/RandomTable\";\nimport Spell from \"../data/Spell\";\nimport Talent from \"../data/Talent\";\n\nexport class MyAppDatabase extends Dexie {\n  randomTables: Dexie.Table<RandomTable, number>; // number = type of the primkey\n  talents: Dexie.Table<Talent, number>;\n  races: Dexie.Table<Race, number>;\n  spells: Dexie.Table<Spell, number>;\n\n  constructor() {\n    super(\"SkirmishTomeDB\");\n    this.version(1).stores({\n      talents: \"++id, name, isFlaw, cost, prerequisite, effect, type, stress\",\n      randomTables: \"++id, name, rows, header, filename\",\n    });\n    this.version(2).stores({\n      talents: \"++id, name, isFlaw, cost, prerequisite, effect, type, stress\",\n      races: \"++id, name, hp, abilityModifier, talents, flaws\",\n      randomTables: \"++id, name, rows, header, filename\",\n    });\n    this.version(3).stores({\n      talents: \"++id, name, isFlaw, cost, prerequisite, effect, type, stress\",\n      races: \"++id, name, hp, abilityModifier, talents, flaws\",\n      randomTables: \"++id, name, rows, header\",\n      spells:\n        \"++id, name, source, castTime, rite, duration, durationText, range, school, effect, damage, mastery,resist, drain\",\n    });\n    this.version(4).stores({\n      talents: \"++id, name, isFlaw, cost, prerequisite, effect, type, stress\",\n      races: \"++id, name, hp, abilityModifier, size, stamina, talents, flaws\",\n      randomTables: \"++id, name, rows, header\",\n      spells:\n        \"++id, name, source, castTime, rite, duration, durationText, range, school, effect, damage, mastery,resist, drain\",\n    });\n\n    this.talents = this.table(\"talents\");\n    this.spells = this.table(\"spells\");\n    this.races = this.table(\"races\");\n    this.randomTables = this.table(\"randomTables\");\n  }\n}\n","import { MyAppDatabase } from \"../database/MyDatabase\";\nimport { IndexableType } from \"dexie\";\nimport IEntity from \"../data/IEntity\";\nimport Filter from \"../data/Filter\";\n\nexport const update = (tableName: string, data: IEntity) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).update(data.id, data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const updateWithCallback = (\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .update(data.id, data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const save = (tableName: string, data: IEntity) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).add(data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNew = (tableName: string, entity: IEntity, filename: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      delete entity[\"id\"];\n      const prom = await db.table(tableName).put({ ...entity, filename: filename });\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNewFromList = (tableName: string, entities: IEntity[], filename: string) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(async function () {\n      const refinedEntities = (entities as IEntity[]).map((entity: IEntity) => {\n        delete entity[\"id\"];\n        return { ...entity, filename: filename };\n      });\n      const prom = await db.table(tableName).bulkPut(refinedEntities);\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveWithCallback = (\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .add(data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const remove = (tableName: string, id: number | undefined) => {\n  const db = new MyAppDatabase();\n  if (id !== undefined) {\n    db.open()\n      .then(function () {\n        db.table(tableName).delete(id);\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAll = (tableName: string, callback: (data: IndexableType[]) => void) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCount = (tableName: string, callback: (value: number) => void) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).count((count) => {\n        callback(count);\n      });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCountPromise = (tableName: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).count();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveByAttribute = (\n  tableName: string,\n  name: string,\n  value: string,\n  callback: (data: IEntity) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray()\n        .then((array) => {\n          callback(array[0]);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttribute = (tableName: string, name: string, value: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      const array = await db.table(tableName).where(name).equalsIgnoreCase(value).toArray();\n      return array[0];\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromise = (tableName: string, value: number) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).get(value);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttributeCount = (\n  tableName: string,\n  name: string,\n  value: string | number\n) => {\n  const db = new MyAppDatabase();\n  if (typeof value === \"string\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equalsIgnoreCase(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else if (typeof value === \"number\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equals(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else {\n    return db\n      .open()\n      .then(async function () {\n        return await db\n          .table(tableName)\n          .where(name)\n          .equalsIgnoreCase(\"\" + value)\n          .count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAllPromise = (tableName: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).toArray();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const applyFilters = (obj: any, filters: Filter[]) => {\n  let test: boolean[] = [];\n  filters.forEach((filter) => {\n    if (typeof filter.value === \"string\") {\n      if (obj[filter.fieldName] instanceof Array) {\n        let hasTag = false;\n        obj[filter.fieldName].forEach((fieldPart: string) => {\n          // @ts-ignore\n          if (fieldPart.toLowerCase().includes(filter.value.toLowerCase())) {\n            hasTag = true;\n          }\n        });\n        if (hasTag) {\n          test.push(true);\n        } else {\n          test.push(false);\n        }\n      } else {\n        test.push(\n          // @ts-ignore\n          obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n        );\n      }\n    } else if (typeof filter.value === \"number\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (typeof filter.value === \"boolean\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (filter.value instanceof Array) {\n      let arrayTest: boolean = false;\n      filter.value.forEach((filterPart: string | boolean | number) => {\n        if (typeof filterPart === \"string\") {\n          if (\n            // @ts-ignore\n            obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n          )\n            arrayTest = true;\n        } else if (typeof filterPart === \"number\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        } else if (typeof filterPart === \"boolean\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        }\n      });\n      test.push(arrayTest);\n    }\n  });\n\n  let result = true;\n  test.forEach((val) => {\n    if (!val) result = false;\n  });\n  return result;\n};\n\nexport const reciveAllFiltered = (\n  tableName: string,\n  filters: Filter[],\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      } else {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAllFilteredPromise = (tableName: string, filters: Filter[]) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        return db\n          .table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled);\n      } else {\n        return db\n          .table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled);\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelection = (\n  tableName: string,\n  attribute: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(attribute)\n        .uniqueKeys(function (array) {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelectionPromise = (tableName: string, attribute: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).orderBy(attribute).uniqueKeys();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const createNewWithId = (\n  tableName: string,\n  entity: IEntity,\n  callback: (id: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .put(entity)\n        .then((id: number) => {\n          callback(id);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteAll = (tableName: string) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).clear();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const exportFilteredFromTable = (tableName: string, filters: Filter[], filename: string) => {\n  reciveAllFiltered(tableName, filters, (all: IndexableType[]) => {\n    let contentType = \"application/json;charset=utf-8;\";\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(all)))], {\n        type: contentType,\n      });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement(\"a\");\n      a.download = filename;\n      a.href = \"data:\" + contentType + \",\" + encodeURIComponent(JSON.stringify(all));\n      a.target = \"_blank\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  });\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  style?: any;\n  onClick?: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, style, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick} style={style}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton style={style}>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n","export function useWebhook(): { hook: string; name: string } | undefined {\n  if (localStorage.getItem(\"webhook\") !== null && localStorage.getItem(\"webhook\") !== \"\") {\n    let name = \"SkirmishTome\";\n    if (localStorage.getItem(\"webhook_user\") !== null)\n      name = localStorage.getItem(\"webhook_user\") + \"\";\n    return { hook: localStorage.getItem(\"webhook\") + \"\", name: name };\n  } else return undefined;\n}\n","export const sendMessage = (\n  webhook: { hook: string; name: string } | undefined,\n  content: string,\n  avatar?: string\n) => {\n  if (webhook !== undefined) {\n    let request = new XMLHttpRequest();\n    request.open(\"POST\", webhook.hook);\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n    let params = {\n      username: webhook.name !== \"\" ? webhook.name : \"SkirmishTome\",\n      avatar_url: avatar !== undefined ? avatar : \"\",\n      content: content,\n    };\n    request.send(JSON.stringify(params));\n  }\n};\n\nexport const sendEmbedMessage = (\n  webhook: { hook: string; name: string } | undefined,\n  params: string\n) => {\n  if (webhook !== undefined) {\n    console.log(params);\n    let request = new XMLHttpRequest();\n    request.open(\"POST\", webhook.hook);\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n    request.send(params);\n  }\n};\n\nexport const formatDiscordText = (text: string): string => {\n  if (text.includes(\"[[\")) {\n    return text.replaceAll(\"[[\", \"*\").replaceAll(\"]]\", \"*\");\n  } else {\n    return text;\n  }\n};\n","import IEntity from \"./IEntity\";\n\nexport enum TalentCategory {\n  physical = \"physical\",\n  mental = \"mental\",\n  social = \"social\",\n  magical = \"magical\",\n}\n\nexport default class Talent implements IEntity {\n  id?: number;\n  name: string;\n  category: string;\n  isFlaw: boolean;\n  cost: number;\n  prerequisite: string;\n  effect: string;\n  type: boolean;\n  stress: string;\n  trigger: string;\n  triggerFrequency: string;\n\n  constructor(\n    id?: number,\n    name?: string,\n    category?: string,\n    isFlaw?: boolean,\n    cost?: number,\n    prerequisite?: string,\n    effect?: string,\n    type?: boolean,\n    stress?: string,\n    trigger?: string,\n    triggerFrequency?: string\n  ) {\n    this.id = id;\n    this.name = name || \"\";\n    this.category = category || TalentCategory.magical;\n    this.isFlaw = isFlaw || false;\n    this.cost = cost || 0;\n    this.prerequisite = prerequisite || \"\";\n    this.effect = effect || \"\";\n    this.type = type || false;\n    this.stress = stress || \"\";\n    this.trigger = trigger || \"\";\n    this.triggerFrequency = triggerFrequency || \"\";\n  }\n}\n\nexport function isTalent(arg: any): arg is Talent {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const costCheck = arg.cost !== undefined && typeof arg.cost == \"number\";\n  const isFlawCheck = arg.isFlaw !== undefined && typeof arg.isFlaw == \"boolean\";\n  const prerequisiteCheck = arg.prerequisite !== undefined && typeof arg.prerequisite == \"string\";\n  const effectCheck = arg.effect !== undefined && typeof arg.effect == \"string\";\n  const typeCheck = arg.type !== undefined && typeof arg.type == \"boolean\";\n  const stressCheck = arg.stress !== undefined && typeof arg.stress == \"string\";\n  const triggerCheck = arg.trigger !== undefined && typeof arg.trigger == \"string\";\n  const triggerFrequencyCheck =\n    arg.triggerFrequency !== undefined && typeof arg.triggerFrequency == \"string\";\n\n  return (\n    arg &&\n    nameCheck &&\n    costCheck &&\n    isFlawCheck &&\n    prerequisiteCheck &&\n    effectCheck &&\n    typeCheck &&\n    stressCheck &&\n    triggerCheck &&\n    triggerFrequencyCheck\n  );\n}\n","export const rollCommand = (\n  commands: string,\n  krit?: boolean\n): { result: number; text: string; rolls: string } => {\n  let result = 0;\n  let text = \"\";\n\n  let newCommands = \"\";\n  commands.split(\" \").forEach((command) => {\n    if (/\\d+/g.test(command)) {\n      newCommands += command;\n    } else {\n      text += \" \" + command;\n    }\n  });\n  newCommands = newCommands.trim();\n\n  let rolls: string = \"(`\";\n  newCommands.split(\" \").forEach((fullCommand: string) => {\n    let commandSplits: string[] = [];\n    fullCommand.split(\"+\").forEach((part) => {\n      let split = part.split(\"-\");\n      commandSplits = commandSplits.concat(split);\n    });\n\n    commandSplits.forEach((command: string) => {\n      let multiplier: number = 1;\n      if (command.includes(\"d\")) {\n        if (!command.startsWith(\"d\")) {\n          multiplier = parseInt(command.split(\"d\")[0]);\n          command = command.split(\"d\")[1];\n        }\n        command = command.replaceAll(\"d\", \"\");\n        if (krit) multiplier = multiplier * 2;\n\n        if (command.includes(\"+\")) {\n          const com = command.split(\"+\");\n          for (let i = 0; i < multiplier; i++) {\n            const newRoll = rollDie(parseInt(com[0]));\n            result += newRoll;\n            rolls += newRoll + \",\";\n          }\n          result += parseInt(com[1]);\n        } else if (command.includes(\"-\")) {\n          const com = command.split(\"-\");\n          for (let i = 0; i < multiplier; i++) {\n            const newRoll = rollDie(parseInt(com[0]));\n            result += newRoll;\n            rolls += newRoll + \",\";\n          }\n          result -= parseInt(com[1]);\n        } else {\n          for (let i = 0; i < multiplier; i++) {\n            const newRoll = rollDie(parseInt(command));\n            result += newRoll;\n            rolls += newRoll + \",\";\n          }\n        }\n      } else {\n        result += parseInt(command);\n        rolls += command + \",\";\n      }\n    });\n    rolls = rolls.slice(0, -1) + \"`)\";\n  });\n\n  return { result: result, text: text, rolls: rolls };\n};\n\nexport const rollDie = (size: number): number => {\n  const min = 1;\n  const max = size;\n  let rand = Math.round(min + Math.random() * (max - min));\n  return rand;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory } from \"react-icons/bi\";\nimport { GiDiceTwentyFacesTwenty, GiSwordsPower } from \"react-icons/gi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (type === \"dice\") {\n      setEntity(true);\n      setLoading(false);\n    } else {\n      let newType = type + \"s\";\n      if (type === \"class\" || type === \"subclass\") newType = type + \"es\";\n      recivePromiseByAttributeCount(newType, \"name\", name)\n        .then((count: number) => {\n          setEntity(count > 0);\n          setLoading(false);\n        })\n        .catch(() => {\n          setEntity(false);\n          setLoading(false);\n        });\n    }\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"talent\":\n        return <GiSwordsPower />;\n      case \"dice\":\n        return <GiDiceTwentyFacesTwenty />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n"],"sourceRoot":""}